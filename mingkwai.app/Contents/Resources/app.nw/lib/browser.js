// Generated by CoffeeScript 1.9.0
(function() {
  var CHR, CND, D, D$, LINESETTER, MKTS, NW, after, alert, app, badge, bindings, build_menu, debug, echo, help, immediately, info, keyboard, log, njs_fs, njs_path, on_file_menu_what_you_should_know_C, rpr, sleep, step, suspend, urge, warn, whisper, win, _demo;

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '眀快排字机/browser';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);

  NW = require('nw.gui');

  win = NW.Window.get();

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  immediately = suspend.immediately;

  after = suspend.after;

  sleep = suspend.sleep;

  D = require('pipedreams2');

  D$ = D.remit.bind(D);

  CHR = require('coffeenode-chr');

  LINESETTER = require('./LINESETTER');

  MKTS = {};

  app = {
    'zoom-level': 0,
    'mm-per-px': 50 / 189
  };

  on_file_menu_what_you_should_know_C = function() {
    return ($('#content')).text("Some kind of interesting stuff.");
  };

  build_menu = function() {
    var edit_menu_item, file_menu, file_menu_entry, help_menu, help_menu_entry, win_menu;
    help_menu = new NW.Menu();
    help_menu.append(new NW.MenuItem({
      label: 'about 眀快排字机'
    }));
    help_menu.append(new NW.MenuItem({
      label: 'what you should know A'
    }));
    help_menu_entry = new NW.MenuItem({
      label: 'Help',
      'submenu': help_menu
    });
    file_menu = new NW.Menu();
    file_menu.append(new NW.MenuItem({
      label: 'New'
    }));
    file_menu.append(new NW.MenuItem({
      label: 'Open...',
      click: on_file_menu_what_you_should_know_C
    }));
    file_menu.append(new NW.MenuItem({
      label: 'Save',
      key: 's',
      modifiers: 'cmd',
      click: function() {
        return urge("saving...");
      }
    }));
    file_menu.append(new NW.MenuItem({
      label: 'Take Screenshot',
      key: 's',
      modifiers: 'cmd-shift',
      click: function() {
        return MKTS.take_screenshot(app);
      }
    }));
    file_menu_entry = new NW.MenuItem({
      label: 'File',
      'submenu': file_menu
    });
    win_menu = new NW.Menu({
      type: 'menubar'
    });
    win_menu.createMacBuiltin('眀快排字机');
    win_menu.insert(file_menu_entry, 1);
    win_menu.append(help_menu_entry);
    win.menu = win_menu;
    edit_menu_item = win.menu.items[2];
    edit_menu_item.submenu.insert(new NW.MenuItem({
      label: 'xxxxxxxxx'
    }), 1);
    return null;
  };

  build_menu();

  win.show();

  win.focus();

  win.zoomLevel = 0;

  win.setResizable(true);

  win.on('close', function() {
    info('close');
    return this.close(true);
  });

  MKTS.get_document_size = function(me) {
    return [($('html')).outerWidth(), ($('html')).outerHeight()];
  };

  MKTS.maximize = function(app) {
    win.moveTo(window.screen.availLeft, window.screen.availTop);
    return win.resizeTo(window.screen.availWidth, window.screen.availHeight);
  };

  MKTS.zoom_to = function(me, level) {

    /* TAINT code duplication */
    var base_zoom_level, zoom_percent;
    base_zoom_level = -0.15;
    win.zoomLevel = level != null ? level : base_zoom_level;
    zoom_percent = (win.zoomLevel - base_zoom_level) * 1.2 * 100;
    echo("zoomed to level " + win.zoomLevel + " (" + (zoom_percent.toFixed(0)) + "%)");
    return win.zoomLevel;
  };

  MKTS.zoom = function(me, delta) {
    var base_zoom_level, zoom_percent;
    base_zoom_level = -0.15;
    if (delta != null) {
      if ((delta > 0 && win.zoomLevel <= 8.8) || (delta < 0 && win.zoomLevel >= -7.5)) {
        win.zoomLevel += delta;
      }
    } else {
      win.zoomLevel = base_zoom_level;
    }
    zoom_percent = (win.zoomLevel - base_zoom_level) * 1.2 * 100;
    echo("zoomed to level " + win.zoomLevel + " (" + (zoom_percent.toFixed(0)) + "%)");
    debug('©zVBdI', ($('.flex-columns-wrap')).height());
    debug('©zVBdI', ($('.flex-columns-wrap')).height() * me['mm-per-px'], 'mm');
    return win.zoomLevel;
  };

  MKTS.print = function() {
    return print();
  };

  MKTS.wait = function(handler) {
    return window.requestAnimationFrame(function() {
      return handler();
    });
  };

  MKTS.take_screenshot = function() {
    return step((function(_this) {
      return function*(resume) {

        /* trying to wait for DOM reflow: */
        var img, img_route;
        (yield MKTS.wait(resume));
        img = (yield MKTS._capture(win, resume));
        img_route = '/tmp/nw.png';
        (yield njs_fs.writeFile(img_route, img, resume));
        return help("image written to " + img_route);
      };
    })(this));
  };

  MKTS.scroll_to = function(label) {
    return ($('html, body')).stop().animate({
      scrollTop: ($(label)).offset().top
    }, 500);
  };

  MKTS.scroll_to_top = function() {
    return this.scroll_to('#mkts-top');
  };

  MKTS.scroll_to_bottom = function() {
    return this.scroll_to('#mkts-bottom');
  };

  MKTS._capture = function(win, handler) {
    return win.capturePage(((function(_this) {
      return function(img) {
        return handler(null, img);
      };
    })(this)), {
      format: 'png',
      datatype: 'buffer'
    });
  };

  MKTS.foo = function(event) {
    return debug('©9HvgT', 'xxxx');
  };


  /* TAINT should live in its own module */


  /* TAINT cosider using e.g. https://www.npmjs.com/package/combokeys */

  keyboard = new Map();

  keyboard.set(187, 'plus');

  keyboard.set(189, 'minus');

  keyboard.set(221, 'asterisk');

  keyboard.set(48, '0');

  keyboard.set(80, 'p');

  keyboard.set(81, 'q');

  keyboard.set(82, 'r');

  keyboard.set(83, 's');

  keyboard.set(89, 'y');

  keyboard.set(37, 'left');

  keyboard.set(39, 'right');

  bindings = {
    'meta+plus': function() {
      return MKTS.zoom(app, +1);
    },
    'meta+shift+asterisk': function() {
      return MKTS.zoom(app, +0.1);
    },
    'meta+0': function() {
      return MKTS.zoom(app, null);
    },
    'meta+minus': function() {
      return MKTS.zoom(app, -1);
    },
    'meta+shift+minus': function() {
      return MKTS.zoom(app, -0.1);
    },
    'meta+p': function() {
      return MKTS.print();
    },
    'meta+left': function() {
      return MKTS.scroll_to_top();
    },
    'meta+right': function() {
      return MKTS.scroll_to_bottom();
    },
    'meta+y': function() {}
  };


  /*
  
  foo <b><i>is it</i> really</b> baz
  
  'foo'
  'foo', ' '
  'foo', ' ', <b><i>, 'is', ⬇, ⬇
  'foo', ' ', <b><i>, 'is', ' ', ⬇, ⬇
  'foo', ' ', <b><i>, 'is', ' ', 'it', ⬇, ⬇
  'foo', ' ', <b><i>, 'is', ' ', 'it', ⬇, ' ', ⬇
  'foo', ' ', <b><i>, 'is', ' ', 'it', ⬇, ' ', 'really', ⬇
  'foo', ' ', <b><i>, 'is', ' ', 'it', ⬇, ' ', 'really', ⬇, ' '
  'foo', ' ', <b><i>, 'is', ' ', 'it', ⬇, ' ', 'really', ⬇, ' ', 'baz'
  
  'foo'
  'foo '
  'foo <b><i>is</i></b>'
  'foo <b><i>is </i></b>'
  'foo <b><i>is it</i></b>'
  'foo <b><i>is it</i> </b>'
  'foo <b><i>is it</i> really</b>'
  'foo <b><i>is it</i> really</b> '
  'foo <b><i>is it</i> really</b> baz'
   */

  MKTS.on_keydown = function(event) {
    var binding, code, key_name, _ref, _ref1;
    code = (_ref = event.keyCode) != null ? _ref : event.which;
    key_name = [];
    if (event.altKey) {
      key_name.push('alt');
    }
    if (event.ctrlKey) {
      key_name.push('ctrl');
    }
    if (event.metaKey) {
      key_name.push('meta');
    }
    if (event.shiftKey) {
      key_name.push('shift');
    }
    key_name.push((_ref1 = keyboard.get(code)) != null ? _ref1 : code);
    key_name = key_name.join('+');
    echo(rpr(key_name), code);
    if ((binding = bindings[key_name]) != null) {
      binding();
      return false;
    } else {
      return true;
    }
  };


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*   * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*   * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*   * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*   * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */

  win.on('document-end', function() {
    return step(function*(resume) {
      MKTS.zoom_to(app, 1.85);
      (yield step.wrap(($('document')).ready, resume));
      help("document ready");
      ($(document)).keydown(MKTS.on_keydown.bind(MKTS));
      return _demo('#box-a');
    });
  });

  _demo = function(container_selector) {
    var container, get_class, get_line, has_hanging_margin, input, md, set_line, test_line;
    md = "# Through the Looking-Glass\n\n'Really, now you ask me,' said Alice, very much confused, 'I don't\nthink—'\n\n'Then you shouldn't talk,' said the Hatter.\n\nThis piece of rudeness was more than Alice could bear: she got up in\ngreat disgust, and walked off; the Dormouse fell asleep instantly, and\nneither of the others took the least notice of her going, though she\nlooked back once or twice, half hoping that they would call after her:\nthe last time she saw them, they were trying to put the Dormouse into\nthe teapot.\n\n'At any rate I'll never go THERE again!' said Alice as she picked her\nway through the wood. 'It's the stupidest tea-party I ever was at in all\nmy life!'\n\nJust as she said this, she noticed that one of the trees had a door\nleading right into it. 'That's very curious!' she thought. 'But\neverything's curious today. I think I may as well go in at once.' And in\nshe went.\n\nOnce more she found herself in the long hall, and close to the little\nglass table. 'Now, I'll manage better this time,' she said to herself,\nand began by taking the little golden key, and unlocking the door that\nled into the garden. Then she went to work nibbling at the mushroom (she\nhad kept a piece of it in her pocket) till she was about a foot high:\nthen she walked down the little passage: and THEN—she found herself at\nlast in the beautiful garden, among the bright flower-beds and the cool\nfountains.\n\n\nAlice opened the door and found that it led into a small passage, not\nmuch larger than a rat-hole: she knelt down and looked along the passage\ninto the loveliest garden you ever saw. How she longed to get out of\nthat dark hall, and wander about among those beds of bright flowers and\nthose cool fountains, but she could not even get her head through the\ndoorway; 'and even if my head would go through,' thought poor Alice, 'it\nwould be of very little use without my shoulders. **愛麗絲** Oh, how I wish I could\nshut up like a telescope! I think I could, if I only knew how to begin.'\nFor, you see, so many out-of-the-way things had happened lately,\nthat Alice had begun to think that very few things indeed were really\nimpossible.";
    md = "# Through the Looking-Glass\n\nThat's very *good* she said, not knowing that she would still have to climb the mountain.\nxxxxxxxxxx yyyyyyyyyyyy zzzzzzzzzz ppppppppppppppppppppppppppppppppppppppp qqqqqqqqqqqqqqqqqqqqqqqq.\n\nIt's a pleasure.";
    container = $(container_selector);
    has_hanging_margin = function(hotml) {
      var last_chr;
      last_chr = CND.last_of((CND.last_of(hotml))[1].replace(/\s+$/, ''));
      return last_chr === '\u00ad' || last_chr === '-' || last_chr === ',' || last_chr === '.' || last_chr === '!' || last_chr === '—' || last_chr === '–' || last_chr === ':';
    };
    get_class = function(is_first, is_last) {
      if (is_first) {
        if (is_last) {
          return 'is-lone';
        }
        return 'is-first';
      }
      if (is_last) {
        return 'is-last';
      }
      return 'is-middle';
    };
    get_line = function(hotml, is_first, is_last) {
      var R;
      R = $(D.HOTMETAL.as_html(hotml));
      R.addClass(get_class(is_first, is_last));
      if (has_hanging_margin(hotml)) {
        R.addClass(' hangs-right-05ex');
      }
      return R;
    };
    test_line = (function(_this) {
      return function(hotml, is_first, is_last) {

        /* Must return whether HTML fits into one line. */
        var R, left_cork, line, right_cork;
        line = get_line(hotml, is_first, is_last);
        left_cork = $("<span class='cork'></span>");
        right_cork = $("<span class='cork'></span>");
        line.prepend(left_cork);
        line.append(right_cork);
        container.append(line);
        R = left_cork.offset()['top'] === right_cork.offset()['top'];
        line.detach();
        return R;
      };
    })(this);
    set_line = (function(_this) {
      return function(hotml, is_first, is_last) {

        /* Inserts text line into document */
        var a, avg_lws_ratio_pc, chunk, chunk_idx, close_tags, color, idx, is_last_chunk, line, line_width_px, lws, lws_width_px, lws_width_px_avg, material, material_ratio_pc, material_width_px, open_tags, text, _i, _j, _len, _ref;
        for (chunk_idx = _i = 0, _len = hotml.length; _i < _len; chunk_idx = ++_i) {
          chunk = hotml[chunk_idx];
          open_tags = chunk[0], text = chunk[1], close_tags = chunk[2];
          if (text[0] === '<') {
            continue;
          }
          is_last_chunk = chunk_idx >= hotml.length - 1;
          if (chunk_idx !== 0) {
            text = text.replace(/^(\s+)/, "<span class='mkts-lws'>$1</span>");
          }
          if (!is_last_chunk) {
            text = text.replace(/(\s+)$/, "<span class='mkts-lws'>$1</span>");
          }

          /* TAINT not a good implementation */
          if ((text.indexOf("<span class='mkts-lws'>")) === -1) {
            text = "<span class='mkts-material'>" + text + "</span>";
          }
          chunk[1] = text;
        }
        line = get_line(hotml, is_first, is_last);
        container.append(line);

        /*
        http://stackoverflow.com/a/16072668/256361:
        ( ( lws.get idx ).getBoundingClientRect().width for idx in [ 0 .. lws.length - 1 ] )
        http://stackoverflow.com/a/16072449/256361:
        window.getComputedStyle(element).width
         */
        line_width_px = line.width();
        lws = line.find('.mkts-lws');
        debug();
        debug('©RwY5D', line.text());
        if (lws.length > 0) {
          lws_width_px = 0;
          for (idx = _j = 0, _ref = lws.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; idx = 0 <= _ref ? ++_j : --_j) {
            lws_width_px += (lws.eq(idx)).width();
          }
          lws_width_px_avg = lws_width_px / lws.length;
          avg_lws_ratio_pc = a = lws_width_px_avg / line_width_px * 100;
          color = a < 10 ? 'green' : (a < 20 ? 'orange' : 'red');
          debug('Ratio of average inter word spaces to column width:', (avg_lws_ratio_pc.toFixed(1)) + '% ', CND[color]('█'));
        } else {
          material = line.find('.mkts-material');
          if (material.length === 0) {
            warn("no LWS, no material found for line " + (rpr(line.outerHTML())));
          } else {
            material_width_px = material.width();
            material_ratio_pc = material_width_px / line_width_px * 100 - 100;
            a = Math.abs(material_ratio_pc);
            color = a < 10 ? 'green' : (a < 20 ? 'orange' : 'red');
            debug('Ratio of material                  to column width:', (material_ratio_pc.toFixed(1)) + '% ', CND[color]('█'));
          }
        }
        return null;
      };
    })(this);
    input = D.create_throughstream();
    input.pipe(D.MD.$as_html()).pipe(D.TYPO.$quotes()).pipe(D.TYPO.$dashes()).pipe(D.HTML.$parse()).pipe(D.HTML.$slice_toplevel_tags()).pipe(D$((function(_this) {
      return function(block_hotml, send) {
        return send(block_hotml);
      };
    })(this))).pipe((function(_this) {
      return function() {
        var line_count;
        line_count = 0;
        return D$(function(block_hotml, send, end) {
          var column_linecounts, lines;
          if (block_hotml != null) {
            lines = D.HOTMETAL.break_lines(block_hotml, test_line, set_line);
            line_count += lines.length;
            send(block_hotml);
          }
          if (end != null) {
            column_linecounts = D.HOTMETAL.get_column_linecounts('even', line_count, 3);
            help("line count: " + line_count);
            help("column line counts: " + column_linecounts);
            return warn('ended');
          }
        });
      };
    })(this)());
    input.write(md);
    input.end();
    return null;
  };

}).call(this);
