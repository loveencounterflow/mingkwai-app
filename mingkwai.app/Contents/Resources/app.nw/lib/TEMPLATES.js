// Generated by CoffeeScript 1.9.0
(function() {
  var ARTBOARD, BOTTOMMARGIN, BOX, BOXER, BUTTON, CHASE, CND, COLUMN, CORK, CSS, GALLEY, GRIP, HBOX, HGAP, HRIBBON, JS, LEFTMARGIN, LINE, OUTER, OVERLAY, PAGE, PANEL, PAPER, RIBBON, RIGHTMARGIN, TEACUP, TOOL, TOPMARGIN, VBOX, VGAP, VRIBBON, WRAP, XHGAP, ZOOMER, alert, badge, debug, help, info, log, name_, njs_fs, njs_path, rpr, urge, warn, whisper,
    __slice = [].slice;

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '眀快排字机/TEMPLATES';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  TEACUP = require('coffeenode-teacup');

  for (name_ in TEACUP) {
    eval("var " + name_ + " = TEACUP[ " + (rpr(name_)) + " ]");
  }

  ARTBOARD = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['artboard'].concat(__slice.call(p)));
  });

  PAGE = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['page'].concat(__slice.call(p)));
  });

  PAPER = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['paper'].concat(__slice.call(p)));
  });

  WRAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['wrap'].concat(__slice.call(p)));
  });

  TOOL = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['tool'].concat(__slice.call(p)));
  });

  BOXER = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['boxer'].concat(__slice.call(p)));
  });

  PANEL = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['panel'].concat(__slice.call(p)));
  });

  GRIP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['grip'].concat(__slice.call(p)));
  });

  OUTER = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['outer'].concat(__slice.call(p)));
  });

  LINE = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['line'].concat(__slice.call(p)));
  });

  OVERLAY = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['overlay'].concat(__slice.call(p)));
  });

  CORK = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['cork'].concat(__slice.call(p)));
  });


  /* JCH GUI */

  BOX = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['box'].concat(__slice.call(p)));
  });

  HBOX = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['hbox'].concat(__slice.call(p)));
  });

  VBOX = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['vbox'].concat(__slice.call(p)));
  });

  RIBBON = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['ribbon'].concat(__slice.call(p)));
  });

  HRIBBON = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['hribbon'].concat(__slice.call(p)));
  });

  VRIBBON = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['vribbon'].concat(__slice.call(p)));
  });

  ZOOMER = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['zoomer'].concat(__slice.call(p)));
  });

  COLUMN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['column'].concat(__slice.call(p)));
  });

  VGAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['vgap'].concat(__slice.call(p)));
  });

  HGAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['hgap'].concat(__slice.call(p)));
  });

  XHGAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['xhgap'].concat(__slice.call(p)));
  });

  CHASE = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['chase'].concat(__slice.call(p)));
  });

  LEFTMARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['leftmargin'].concat(__slice.call(p)));
  });

  RIGHTMARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['rightmargin'].concat(__slice.call(p)));
  });

  TOPMARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['topmargin'].concat(__slice.call(p)));
  });

  BOTTOMMARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['bottommargin'].concat(__slice.call(p)));
  });


  /* WORKSPACE (IMPOSITION) */

  GALLEY = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return TAG.apply(null, ['galley'].concat(__slice.call(p)));
  });


  /* TAINT should be implemented using Polymer / Shadow DOM */

  BUTTON = function() {

    /* MaterializeCSS-compatible button */
    return A('.btn.waves-effect.waves-light', {
      href: '#'
    }, (function(_this) {
      return function() {
        TEXT("Demo");
        return I('.mdi-action-search.right');
      };
    })(this));
  };

  JS = new_tag(function(route) {
    return SCRIPT({
      type: 'text/javascript',
      src: route
    });
  });

  CSS = new_tag(function(route) {
    return LINK({
      rel: 'stylesheet',
      href: route
    });
  });

  this.test_page = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            JS('./jquery-2.1.3.js');
            JS('./outerHTML-2.1.0.js');
            JS('./browser.js');
            STYLE('', "html, body {\n  margin:                 0;\n  padding:                0;\n}\n.gauge {\n  position:               absolute;\n  outline:                1px solid red;\n}");
            return COFFEESCRIPT(function() {
              return ($('document')).ready(function() {
                var d_npx, d_rpx, gauge, _i, _results;
                log = console.log.bind(console);
                gauge = $("<div id='meter-gauge' style='position:absolute;'></div>");
                ($('body')).append(gauge);
                _results = [];
                for (d_npx = _i = 1; _i <= 1000; d_npx = ++_i) {
                  gauge.css('height', d_npx + "px");
                  d_rpx = gauge[0].getBoundingClientRect()['height'];
                  _results.push(log(d_npx, d_rpx));
                }
                return _results;
              });
            });
          });
          return BODY(function() {});
        });
      };
    })(this));
  };

  this.splash_window = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          STYLE('', "body, html {\n  width:                    100%;\n  height:                   100%;\n  overflow:                 hidden;\n}\nbody {\n  width:                    100%;\n  height:                   100%;\n  background-color:         rgba( 255, 255, 255, 0.0 );\n  background-image:         url(./mingkwai-logo-circled.png);\n  background-size:          contain;\n  background-repeat:        no-repeat;\n  background-position:      50%;\n}");
          return BODY(function() {});
        });
      };
    })(this));
  };

  this.layout = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('mingkwai');
            LINK({
              rel: 'shortcut icon',
              href: './favicon.icon'
            });
            CSS('./html5doctor-css-reset.css');
            JS('./jquery-2.1.3.js');
            CSS('./jquery-ui-1.11.3.custom/jquery-ui.css');
            JS('./jquery-ui-1.11.3.custom/jquery-ui.js');
            JS('./jquery.event.drag-2.2/jquery.event.drag-2.2.js');
            JS('./outerHTML-2.1.0.js');
            JS('./blaidddrwg.js');
            JS('./jquery-transit.js');
            JS('./browser.js');
            JS('./process-xcss-rules.js');
            CSS('./materialize/css/materialize.css');
            JS('./materialize/js/materialize.min.js');
            return CSS('./mkts-main.css');
          });
          COFFEESCRIPT(function() {
            return ($(document)).ready(function() {
              var dragging, page_x, page_y, scroll_x, scroll_y, shifted;
              window.zoomer = $('zoomer');
              scroll_x = null;
              scroll_y = null;
              page_x = null;
              page_y = null;
              dragging = false;
              shifted = false;
              ($(document)).on('keyup keydown', function(event) {
                shifted = event.shiftKey;
                return true;
              });
              ($(document)).on('dragstart', function(event, data) {
                console.log('dragstart', event);
                scroll_x = ($(window)).scrollLeft();
                scroll_y = ($(window)).scrollTop();
                page_x = event.pageX;
                page_y = event.pageY;
                dragging = true;
                return ($('body')).addClass('grabbing');
              });
              ($(document)).on('mousemove', function(event) {
                var factor;
                if (!dragging) {
                  return;
                }
                factor = 1;
                ($(window)).scrollLeft(($(window)).scrollLeft() + (page_x - event.pageX) * factor);
                return ($(window)).scrollTop(($(window)).scrollTop() + (page_y - event.pageY) * factor);
              });
              return ($(document)).on('dragend', function(event) {
                dragging = false;
                return ($('body')).removeClass('grabbing');
              });
            });
          });
          return BODY(function() {
            ARTBOARD('.galley', function() {
              return ZOOMER(function() {
                return GALLEY(function() {
                  OVERLAY("Galley");
                  return CHASE(function() {
                    TOPMARGIN(function() {});
                    HBOX(function() {
                      LEFTMARGIN(function() {});
                      COLUMN(function() {});
                      VGAP(function() {});
                      COLUMN(function() {});
                      VGAP(function() {});
                      COLUMN(function() {});
                      return RIGHTMARGIN(function() {});
                    });
                    return BOTTOMMARGIN(function() {});
                  });
                });
              });
            });
            ARTBOARD('.pages', function() {
              return ZOOMER(function() {
                var page_nr, _i, _results;
                _results = [];
                for (page_nr = _i = 1; _i <= 5; page_nr = ++_i) {
                  _results.push(PAGE(function() {
                    OVERLAY(page_nr);
                    return CHASE(function() {
                      TOPMARGIN(function() {});
                      HBOX(function() {
                        LEFTMARGIN(function() {});
                        COLUMN(function() {});
                        VGAP(function() {});
                        COLUMN(function() {});
                        VGAP(function() {});
                        COLUMN(function() {});
                        return RIGHTMARGIN(function() {});
                      });
                      return BOTTOMMARGIN(function() {});
                    });
                  }));
                }
                return _results;
              });
            });
            return HRIBBON('.draggable', {
              style: 'height:20mm;'
            }, function() {
              I('.small.mkts-tool-hand', {
                action: 'tool-mode-hand'
              });
              I('.small.mdi-editor-insert-chart', {
                action: 'editor-insert-chart'
              });
              I('.small.mdi-action-3d-rotation', {
                action: 'action-3d-rotation'
              });
              I('.small.mdi-action-assignment', {
                action: 'action-assignment'
              });
              I('.small.mdi-image-blur-on', {
                action: 'image-blur-on'
              });
              I('.small.mdi-action-print', {
                action: 'action-print'
              });
              I('.small.mdi-action-cached', {
                action: 'action-cached'
              });
              I('.small.mdi-content-content-cut', {
                action: 'content-content-cut'
              });
              return I('.small.mdi-content-content-copy', {
                action: 'content-content-copy'
              });
            });
          });
        });
      };
    })(this));
  };

}).call(this);
