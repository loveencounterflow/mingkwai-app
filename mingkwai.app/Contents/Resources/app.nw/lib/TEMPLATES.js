// Generated by CoffeeScript 1.9.1
(function() {
  var ARTBOARD, BOTTOMMARGIN, BOX, BUTTON, CELL, CHASE, CHASEWRAP, CHR, CND, COLUMN, CSS, GALLEY, GAP, HBOX, HGAP, HRIBBON, JS, LEFTMARGIN, MARGIN, OVERLAY, PAGE, PAPER, RIBBON, RIGHTMARGIN, ROW, RULER, STYLUS, TEACUP, TOOL, TOPMARGIN, VBOX, VGAP, VRIBBON, XHGAP, ZOOMER, _STYLUS, alert, badge, debug, help, info, log, name_, njs_fs, njs_path, rpr, urge, warn, whisper,
    slice = [].slice;

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '眀快排字机/TEMPLATES';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  TEACUP = require('coffeenode-teacup');

  CHR = require('coffeenode-chr');

  _STYLUS = require('stylus');

  for (name_ in TEACUP) {
    eval("var " + name_ + " = TEACUP[ " + (rpr(name_)) + " ]");
  }

  ARTBOARD = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['artboard'].concat(slice.call(p)));
  });

  PAGE = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['page'].concat(slice.call(p)));
  });

  PAPER = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['paper'].concat(slice.call(p)));
  });

  TOOL = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['tool'].concat(slice.call(p)));
  });

  OVERLAY = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['overlay'].concat(slice.call(p)));
  });


  /* JCH GUI */

  BOX = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['box'].concat(slice.call(p)));
  });

  HBOX = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['hbox'].concat(slice.call(p)));
  });

  VBOX = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['vbox'].concat(slice.call(p)));
  });

  RIBBON = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['ribbon'].concat(slice.call(p)));
  });

  HRIBBON = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['hribbon'].concat(slice.call(p)));
  });

  VRIBBON = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['vribbon'].concat(slice.call(p)));
  });

  ZOOMER = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['zoomer'].concat(slice.call(p)));
  });

  COLUMN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['column'].concat(slice.call(p)));
  });

  GAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['gap'].concat(slice.call(p)));
  });

  ROW = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['row'].concat(slice.call(p)));
  });

  CELL = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['cell'].concat(slice.call(p)));
  });

  RULER = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['ruler'].concat(slice.call(p)));
  });

  VGAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['vgap'].concat(slice.call(p)));
  });

  HGAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['hgap'].concat(slice.call(p)));
  });

  XHGAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['xhgap'].concat(slice.call(p)));
  });

  CHASE = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['chase'].concat(slice.call(p)));
  });

  CHASEWRAP = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['chasewrap'].concat(slice.call(p)));
  });

  MARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['margin'].concat(slice.call(p)));
  });

  LEFTMARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['leftmargin'].concat(slice.call(p)));
  });

  RIGHTMARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['rightmargin'].concat(slice.call(p)));
  });

  TOPMARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['topmargin'].concat(slice.call(p)));
  });

  BOTTOMMARGIN = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['bottommargin'].concat(slice.call(p)));
  });


  /* WORKSPACE (IMPOSITION) */

  GALLEY = new_tag(function() {
    var p;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return TAG.apply(null, ['galley'].concat(slice.call(p)));
  });


  /* TAINT should be implemented using Polymer / Shadow DOM */

  BUTTON = function() {

    /* MaterializeCSS-compatible button */
    return A('.btn.waves-effect.waves-light', {
      href: '#'
    }, (function(_this) {
      return function() {
        TEXT("Demo");
        return I('.mdi-action-search.right');
      };
    })(this));
  };

  JS = new_tag(function(route) {
    return SCRIPT({
      type: 'text/javascript',
      src: route
    });
  });

  CSS = new_tag(function(route) {
    return LINK({
      rel: 'stylesheet',
      href: route
    });
  });

  STYLUS = function(source) {
    return STYLE({}, _STYLUS.render(source));
  };

  this.font_test = function(app, md, settings, handler) {
    var n, triplets;
    n = 10;
    triplets = [[0x0061, 0x007a, 'u-latn'], [0x2e80, 0x2eff, 'u-cjk-rad2'], [0x2f00, 0x2fdf, 'u-cjk-rad1'], [0x3000, 0x303f, 'u-cjk-sym'], [0x31c0, 0x31ef, 'u-cjk-strk'], [0x3200, 0x32ff, 'u-cjk-enclett'], [0x3300, 0x33ff, 'u-cjk-cmp'], [0x3400, 0x4dbf, 'u-cjk-xa'], [0x4e00, 0x9fff, 'u-cjk'], [0xe000, 0xf8ff, 'jzr'], [0xf900, 0xfaff, 'u-cjk-cmpi1'], [0xfe30, 0xfe4f, 'u-cjk-cmpf'], [0x20000, 0x2b81f, 'u-cjk-xb'], [0x2a700, 0x2b73f, 'u-cjk-xc'], [0x2b740, 0x2b81f, 'u-cjk-xd'], [0x2f800, 0x2fa1f, 'u-cjk-cmpi2']];
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('mingkwai');
            LINK({
              rel: 'shortcut icon',
              href: './favicon.icon'
            });
            CSS('./html5doctor-css-reset.css');
            JS('./jquery-2.1.3.js');
            CSS('./jquery-ui-1.11.3.custom/jquery-ui.css');
            JS('./jquery-ui-1.11.3.custom/jquery-ui.js');
            JS('./jquery.event.drag-2.2/jquery.event.drag-2.2.js');
            JS('./outerHTML-2.1.0.js');
            JS('./blaidddrwg.js');
            JS('./jquery-transit.js');
            JS('./browser.js');
            JS('./process-xcss-rules.js');
            CSS('./materialize/css/materialize.css');
            JS('./materialize/js/materialize.min.js');
            return CSS('./mkts-main.css');
          });
          return BODY({
            style: "transform:scale(2);transform-origin:top left;"
          }, function() {
            var _, cid, j, len, ref, rsg;
            H1(function() {
              return "Ligatures";
            });
            P(function() {
              TEXT("Standard Ligatures* (feature liga): fluffy, shy, official; ");
              return EM("gg, nagy, gjuha, Qyteti.");
            });
            H1(function() {
              return "Unicode Ranges";
            });
            DIV(function() {
              var cid, cids, j, k, len, ref, ref1, results, results1;
              ref1 = [
                (function() {
                  results1 = [];
                  for (var k = ref = 0x2a6d6 - 9; ref <= 0x2a6d6 ? k <= 0x2a6d6 : k >= 0x2a6d6; ref <= 0x2a6d6 ? k++ : k--){ results1.push(k); }
                  return results1;
                }).apply(this), [173824, 173825, 173826, 173827, 173828, 173829, 173830, 173831, 173832, 173833, 173834]
              ];
              results = [];
              for (j = 0, len = ref1.length; j < len; j++) {
                cids = ref1[j];
                results.push((function() {
                  var l, len1, results2;
                  results2 = [];
                  for (l = 0, len1 = cids.length; l < len1; l++) {
                    cid = cids[l];
                    results2.push(TEXT(CHR.as_uchr(cid)));
                  }
                  return results2;
                })());
              }
              return results;
            });
            for (j = 0, len = triplets.length; j < len; j++) {
              ref = triplets[j], cid = ref[0], _ = ref[1], rsg = ref[2];
              P(function() {
                SPAN(function() {
                  var i, k, ref1, results;
                  results = [];
                  for (i = k = 0, ref1 = n; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
                    results.push(SPAN({
                      style: "display:inline-block;"
                    }, function() {
                      return CHR.as_uchr(cid + i);
                    }));
                  }
                  return results;
                });
                return SPAN(function() {
                  return TEXT("(" + rsg + ")");
                });
              });
            }
            H1(function() {
              return "Other Stuff";
            });
            P({
              style: "font-family:'spincycle-eot','lastresort';"
            }, function() {
              SPAN(function() {
                return "一丁";
              });
              return SPAN(function() {
                return "abcdef (spincycle-eot)";
              });
            });
            P({
              style: "font-family:'spincycle-embedded-opentype','lastresort';"
            }, function() {
              SPAN(function() {
                return "一丁";
              });
              return SPAN(function() {
                return "abcdef (spincycle-embedded-opentype)";
              });
            });
            P({
              style: "font-family:'spincycle-woff2','lastresort';"
            }, function() {
              SPAN(function() {
                return "一丁";
              });
              return SPAN(function() {
                return "abcdef (spincycle-woff2)";
              });
            });
            P({
              style: "font-family:'spincycle-woff','lastresort';"
            }, function() {
              SPAN(function() {
                return "一丁";
              });
              return SPAN(function() {
                return "abcdef (spincycle-woff)";
              });
            });
            P({
              style: "font-family:'spincycle-truetype','lastresort';"
            }, function() {
              SPAN(function() {
                return "一丁";
              });
              return SPAN(function() {
                return "abcdef (spincycle-truetype)";
              });
            });
            P({
              style: "font-family:'spincycle-svg','lastresort';"
            }, function() {
              SPAN(function() {
                return "一丁";
              });
              return SPAN(function() {
                return "abcdef (spincycle-svg)";
              });
            });
            return P({
              style: "font-family:'lastresort';"
            }, function() {
              SPAN(function() {
                return "一丁";
              });
              return SPAN(function() {
                return "abcdef (lastresort)";
              });
            });
          });
        });
      };
    })(this));
  };

  this.test_page = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            JS('./jquery-2.1.3.js');
            JS('./outerHTML-2.1.0.js');
            JS('./browser.js');
            STYLE('', "html, body {\n  margin:                 0;\n  padding:                0;\n}\n.gauge {\n  position:               absolute;\n  outline:                1px solid red;\n}");
            return COFFEESCRIPT(function() {
              return ($('document')).ready(function() {
                var d_npx, d_rpx, gauge, j, results;
                log = console.log.bind(console);
                gauge = $("<div id='meter-gauge' style='position:absolute;'></div>");
                ($('body')).append(gauge);
                results = [];
                for (d_npx = j = 1; j <= 1000; d_npx = ++j) {
                  gauge.css('height', d_npx + "px");
                  d_rpx = gauge[0].getBoundingClientRect()['height'];
                  results.push(log(d_npx, d_rpx));
                }
                return results;
              });
            });
          });
          return BODY(function() {});
        });
      };
    })(this));
  };

  this.splash_window = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          STYLE('', "body, html {\n  width:                    100%;\n  height:                   100%;\n  overflow:                 hidden;\n}\nbody {\n  width:                    100%;\n  height:                   100%;\n  background-color:         rgba( 255, 255, 255, 0.0 );\n  background-image:         url(./mingkwai-logo-circled.png);\n  background-size:          contain;\n  background-repeat:        no-repeat;\n  background-position:      50%;\n}");
          return BODY(function() {});
        });
      };
    })(this));
  };

  this.NORMAL_layout = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('mingkwai (NORMAL_layout)');
            LINK({
              rel: 'shortcut icon',
              href: './favicon.icon'
            });
            CSS('./html5doctor-css-reset.css');
            JS('./jquery-2.1.3.js');
            CSS('./jquery-ui-1.11.3.custom/jquery-ui.css');
            JS('./jquery-ui-1.11.3.custom/jquery-ui.js');
            JS('./jquery.event.drag-2.2/jquery.event.drag-2.2.js');
            JS('./outerHTML-2.1.0.js');
            JS('../node_modules/jquery-replace-text/jquery-replace-text.js');
            JS('./blaidddrwg.js');
            JS('./jquery-transit.js');
            JS('./browser.js');
            JS('./process-xcss-rules.js');
            CSS('./materialize/css/materialize.css');
            JS('./materialize/js/materialize.min.js');
            CSS('./mkts-main.css');
            return STYLE("body {\n  font-size: 4mm;\n}");
          });
          COFFEESCRIPT(function() {
            return ($(document)).ready(function() {
              var dragging, page_x, page_y, scroll_x, scroll_y, shifted;
              window.zoomer = $('zoomer');
              scroll_x = null;
              scroll_y = null;
              page_x = null;
              page_y = null;
              dragging = false;
              shifted = false;
              return ($(document)).on('keyup keydown', function(event) {
                shifted = event.shiftKey;
                return true;
              });

              /* DRAGGING / HAND TOOL SUPPORT */
            });
          });
          return BODY(function() {
            ARTBOARD('.galley', function() {
              return ZOOMER(function() {
                return GALLEY(function() {
                  OVERLAY("Galley");
                  return CHASE(function() {
                    TOPMARGIN(function() {});
                    HBOX(function() {
                      LEFTMARGIN(function() {});
                      COLUMN(function() {});
                      VGAP(function() {});
                      COLUMN(function() {});
                      VGAP(function() {});
                      COLUMN(function() {});
                      return RIGHTMARGIN(function() {});
                    });
                    return BOTTOMMARGIN(function() {});
                  });
                });
              });
            });
            ARTBOARD('.pages', function() {
              return ZOOMER(function() {
                var j, page_nr, results;
                results = [];
                for (page_nr = j = 1; j <= 5; page_nr = ++j) {
                  results.push(PAGE(function() {
                    OVERLAY(page_nr);
                    RULER('.horizontal');
                    RULER('.vertical');
                    return CHASE(function() {
                      TOPMARGIN(function() {});
                      HBOX(function() {
                        LEFTMARGIN(function() {});
                        COLUMN(function() {});
                        VGAP(function() {});
                        COLUMN(function() {});
                        VGAP(function() {});
                        COLUMN(function() {});
                        return RIGHTMARGIN(function() {});
                      });
                      return BOTTOMMARGIN(function() {});
                    });
                  }));
                }
                return results;
              });
            });
            return HRIBBON('.draggable', {
              style: 'height:20mm;'
            }, function() {
              I('.small.mkts-tool-hand', {
                action: 'tool-mode-hand'
              });
              I('.small.mdi-editor-insert-chart', {
                action: 'editor-insert-chart'
              });
              I('.small.mdi-action-3d-rotation', {
                action: 'action-3d-rotation'
              });
              I('.small.mdi-action-assignment', {
                action: 'action-assignment'
              });
              I('.small.mdi-image-blur-on', {
                action: 'image-blur-on'
              });
              I('.small.mdi-action-print', {
                action: 'action-print'
              });
              I('.small.mdi-action-cached', {
                action: 'action-cached'
              });
              I('.small.mdi-content-content-cut', {
                action: 'content-content-cut'
              });
              return I('.small.mdi-content-content-copy', {
                action: 'content-content-copy'
              });
            });
          });
        });
      };
    })(this));
  };


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /* just for testing of CSS @font-face, unicode-range */

  this.FONTTEST_layout = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('mingkwai');
            LINK({
              rel: 'shortcut icon',
              href: './favicon.icon'
            });
            CSS('./html5doctor-css-reset.css');
            JS('./jquery-2.1.3.js');
            CSS('./jquery-ui-1.11.3.custom/jquery-ui.css');
            JS('./jquery-ui-1.11.3.custom/jquery-ui.js');
            JS('./jquery.event.drag-2.2/jquery.event.drag-2.2.js');
            JS('./outerHTML-2.1.0.js');
            JS('./blaidddrwg.js');
            JS('./jquery-transit.js');
            JS('./browser.js');
            CSS('./materialize/css/materialize.css');
            JS('./materialize/js/materialize.min.js');
            CSS('./mkts-main.css');
            return STYLE("@font-face {\n  font-family:    'ampersand';\n  src:            local('Schwabacher');\n  unicode-range:  U+0026;\n}\n\n@font-face {\n  font-family:    'cjk';\n  src:            local('Sun-ExtA');\n  unicode-range:  U+4e00-9fff;\n}\n\n@font-face {\n  font-family:    'cjk';\n  src:            local('sunflower-u-cjk-xb');\n  unicode-range:  U+20000-2b81f;\n}\n\n@font-face {\n  font-family:    'cjk';\n  src:            local('jizura3b');\n  unicode-range:  U+e000-f8ff;\n}\n\n@font-face {\n  font-family:    'ancientsymbols';\n  src:            local('Geneva');\n  unicode-range:  U+10190-1019B;\n}\n\nbody, html {\n  font-family:    'ampersand', 'cjk', 'ancientsymbols', 'Source Code Pro';\n}\n\n");
          });
          return BODY(function() {
            return RAW("<div>&amp;</div>\n<div>𐆓</div>\n<div>一丁丂七丄丅丆万丈三 u-cjk</div>\n<div>𠀀𠀁𠀂𠀃𠀄𠀅𠀆𠀇𠀈𠀉 u-cjk-xb</div>\n<div> jzr</div>");
          });
        });
      };
    })(this));
  };


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /* for testing of possible rendering bug related to CSS `display: flex; height: ...;` */

  this.FLEXHEIGHTTEST_layout = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('mingkwai');
            JS('./jquery-2.1.3.js');
            JS('./blaidddrwg.js');
            JS('./browser.js');
            return STYLUS("\nhtml\n  font-size:        3mm\n\nchase\ncolumn\n  outline:                1px dotted red\n  outline-offset:         -1px\n\nchase\n  position:               relative\n  left:                   4.5mm\n  top:                    8mm\n  // width:                  201mm\n  // /* ### TAINT ### */\n  height:                 278.85mm\n  display:                flex\n  flex-direction:         column\n  float:                  left\n\ncolumn\n  display:                block\n  flex-shrink:            1\n  flex-grow:              1\n");
          });
          return BODY(function() {
            return CHASE(function() {
              return COLUMN(function() {
                var idx, j, results;
                results = [];
                for (idx = j = 0; j < 90; idx = ++j) {
                  results.push(DIV("" + idx));
                }
                return results;
              });
            });
          });
        });
      };
    })(this));
  };


  /* rendering with float instead of flex */

  this.FLOAT_layout = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('mingkwai');
            JS('./jquery-2.1.3.js');
            JS('./blaidddrwg.js');
            JS('./browser.js');
            return STYLUS("\n\n/* ------------------------------------------------------------------------------------------------------ */\n/* Experimentally detected that `$paper-height = 297mm - 0.13mm` is not enough but\n  `297mm - 0.15mm` is enough to avoid intervening blank pages in the PDF. */\n$paper-width                = 210mm\n$paper-height               = 297mm - 0.15mm\n// $paper-width                = 210mm\n// $paper-height               = 297mm\n/* ...................................................................................................... */\n// 'gutters' in typographic terms (non-printable areas) become 'paddings' in CSS:\n$gutter-left                = 4.5mm\n$gutter-right               = $gutter-left\n$gutter-top                 = 8mm\n$gutter-bottom              = 10mm\n/* ...................................................................................................... */\n// 'margins' in typographic terms (areas outside the main content) become 'paddings' in CSS:\n$margin-left                = 15mm\n$margin-right               = $margin-left\n$margin-top                 = 11mm\n$margin-bottom              = 5mm\n/* ...................................................................................................... */\n$gap-vertical-width         = 5mm\n/* ...................................................................................................... */\n// the chase represents the printable area; inside, flanked by the margins, is the main content area:\n$chase-width                = $paper-width  - $gutter-left  - $gutter-right\n$chase-height               = $paper-height - $gutter-top   - $gutter-bottom\n/* ...................................................................................................... */\n$galley-width               = $paper-width\n/* ...................................................................................................... */\n$epsilon                    = 1mm\n\n\n/* ------------------------------------------------------------------------------------------------------ */\npaper\npage\n width:                   $paper-width\n height:                  $paper-height\n display:                 block\n\nhtml\n  font-size:              4mm\n\noverlay\n  display:                block\n  position:               absolute\n\nmargin\n  display:                block\n\nmargin.left\nmargin.right\n  float:                  left\n  height:                 100%\n\nmargin.left\n  min-width:              $margin-left\n  max-width:              $margin-left\n\nmargin.right\n  min-width:              $margin-right\n  max-width:              $margin-right\n\nmargin.top\nmargin.bottom\n  width:                  100%\n\nmargin.top\n  min-height:             $margin-top\n  max-height:             $margin-top\n\nmargin.bottom\n  min-height:             $margin-bottom\n  max-height:             $margin-bottom\n\nchase\ncolumn\nbox\nmargin\ngap\npage\n  outline:                1px dotted red\n  outline-offset:         -1px\n\nchase\n  position:               relative\n  left:                   $gutter-left\n  top:                    $gutter-top\n  width:                  $chase-width\n  height:                 $chase-height\n  display:                block\n\nbox\n  display:                block\n  float:                  left\n  width:                  $chase-width - $margin-left - $margin-right - $epsilon\n  height:                 10mm\n  background-color: #ddd\n\ngap\n  display:                block\n  width:                  $gap-vertical-width\n  float:                  left\n  height:                 100%\n\ncolumn\n  display:                block\n  height:                 100%\n  float:                  left\n\n.columns-3 column\n  width:                  ( ( $chase-width - 2 * $gap-vertical-width ) / 3 )");
          });
          return BODY(function() {
            return ARTBOARD('.pages', function() {
              return ZOOMER(function() {
                return PAGE(function() {
                  return CHASE(function() {
                    MARGIN('.top', function() {});
                    MARGIN('.left', function() {});
                    BOX('.horizontal.columns-3', function() {
                      return COLUMN(function() {});
                    });
                    MARGIN('.right', function() {});
                    return MARGIN('.bottom', function() {});
                  });
                });
              });
            });
          });
        });
      };
    })(this));
  };


  /* rendering with float instead of flex */

  this.TABLE_layout = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          var COLUMNBOX;
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('mingkwai');
            JS('./jquery-2.1.3.js');
            JS('./blaidddrwg.js');
            JS('./browser.js');
            return STYLUS("\n\n/* ------------------------------------------------------------------------------------------------------ */\n/* Experimentally detected that `$paper-height = 297mm - 0.13mm` is not enough but\n  `297mm - 0.15mm` is enough to avoid intervening blank pages in the PDF. */\n$paper-width                = 210mm\n$paper-height               = 297mm - 0.15mm\n// $paper-width                = 210mm\n// $paper-height               = 297mm\n/* ...................................................................................................... */\n// 'gutters' in typographic terms (non-printable areas) become 'paddings' in CSS:\n$gutter-left                = 4.5mm\n$gutter-right               = $gutter-left\n$gutter-top                 = 8mm\n$gutter-bottom              = 10mm\n/* ...................................................................................................... */\n// 'margins' in typographic terms (areas outside the main content) become 'paddings' in CSS:\n$margin-left                = 15mm\n$margin-right               = $margin-left\n$margin-top                 = 11mm\n$margin-bottom              = 5mm\n/* ...................................................................................................... */\n$gap-vertical-width         = 5mm\n/* ...................................................................................................... */\n// the chase represents the printable area; inside, flanked by the margins, is the main content area:\n$chase-width                = $paper-width  - $gutter-left  - $gutter-right\n$chase-height               = $paper-height - $gutter-top   - $gutter-bottom\n/* ...................................................................................................... */\n$galley-width               = $paper-width\n\n\n/* ------------------------------------------------------------------------------------------------------ */\npaper\npage\n width:                   $paper-width\n height:                  $paper-height\n display:                 block\n\nhtml\n  font-size:              4mm\n\n.chase\ncolumn\nbox\nmargin\ngap\npage\n  outline:                1px dotted red\n  outline-offset:         -1px\n\n.chase\n  border-collapse:        collapse\n  margin:                 0\n  padding:                0\n  position:               relative\n  left:                   $gutter-left\n  top:                    $gutter-top\n  width:                  $chase-width\n  height:                 $chase-height\n\n.margin\n  margin:                 0\n  padding:                0\n\n.margin.margin-left\n  height:                 $chase-height\n  width:                  $margin-left\n\n.margin.margin-right\n  height:                 $chase-height\n  width:                  $margin-right\n\n.margin.margin-top\n.margin.margin-bottom\n  width:                  $galley-width - $margin-left - $margin-right\n\n.margin.margin-top\n  height:                 $margin-top\n\n.margin.margin-bottom\n  height:                 $margin-bottom\n\n.gap\n  margin:                 0\n  padding:                0\n  width:                  $gap-vertical-width\n  min-width:              $gap-vertical-width\n  max-width:              $gap-vertical-width\n\n.columnbox\n.column\n  border-collapse:        collapse\n  margin:                 0\n  padding:                0\n  height:                 100%\n\n.columnbox\n  width:                  100%\n\n.column.columns-3\n  width:                  ( ( $chase-width - 2 * $gap-vertical-width ) / 3 )\n  min-width:              ( ( $chase-width - 2 * $gap-vertical-width ) / 3 )\n  max-width:              ( ( $chase-width - 2 * $gap-vertical-width ) / 3 )\n\ntd\n  outline: 1px solid green");
          });
          CHASE = function() {
            var p;
            p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return TABLE('.chase', function() {
              TR(function() {
                TD('.margin.margin-left', {
                  rowspan: 3
                });
                TD('.margin.margin-top');
                return TD('.margin.margin-right', {
                  rowspan: 3
                });
              });
              TR(function() {
                return TD.apply(null, ['.main'].concat(slice.call(p)));
              });
              return TR(function() {
                return TD('.margin.margin-bottom');
              });
            });
          };
          COLUMNBOX = function(column_count) {
            return TABLE('.columnbox', function() {
              return TR(function() {
                var column_nr, j, ref, results;
                results = [];
                for (column_nr = j = 1, ref = column_count; 1 <= ref ? j <= ref : j >= ref; column_nr = 1 <= ref ? ++j : --j) {
                  if (column_nr !== 1) {
                    TD('.gap.vertical');
                  }
                  results.push(TD(".column.columns-" + column_count, function() {
                    if (column_nr === 1) {
                      return TEXT("xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx\nxxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx xxx");
                    }
                  }));
                }
                return results;
              });
            });
          };
          return BODY(function() {
            return ARTBOARD('.pages', function() {
              return ZOOMER(function() {
                return PAGE(function() {
                  return CHASE({}, function() {
                    return COLUMNBOX(3, function() {});
                  });
                });
              });
            });
          });
        });
      };
    })(this));
  };


  /* rendering with float instead of flex */

  this.INLINEBLOCK_layout = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('mingkwai');
            JS('./jquery-2.1.3.js');
            JS('./blaidddrwg.js');
            JS('./browser.js');
            return STYLUS("\n\n/* ------------------------------------------------------------------------------------------------------ */\n/* Experimentally detected that `$paper-height = 297mm - 0.13mm` is not enough but\n  `297mm - 0.15mm` is enough to avoid intervening blank pages in the PDF. */\n$paper-width                = 210mm\n$paper-height               = 297mm - 0.15mm\n// $paper-width                = 210mm\n// $paper-height               = 297mm\n/* ...................................................................................................... */\n// 'gutters' in typographic terms (non-printable areas) become 'paddings' in CSS:\n$gutter-left                = 4.5mm\n$gutter-right               = $gutter-left\n$gutter-top                 = 8mm\n$gutter-bottom              = 10mm\n/* ...................................................................................................... */\n// 'margins' in typographic terms (areas outside the main content) become 'paddings' in CSS:\n$margin-left                = 15mm\n$margin-right               = $margin-left\n$margin-top                 = 11mm\n$margin-bottom              = 5mm\n/* ...................................................................................................... */\n$gap-vertical-width         = 5mm\n/* ...................................................................................................... */\n// the chase represents the printable area; inside, flanked by the margins, is the main content area:\n$chase-width                = $paper-width  - $gutter-left  - $gutter-right\n$chase-height               = $paper-height - $gutter-top   - $gutter-bottom\n/* ...................................................................................................... */\n$galley-width               = $paper-width\n/* ...................................................................................................... */\n$epsilon                    = 1mm\n\n\n/* ------------------------------------------------------------------------------------------------------ */\npaper\npage\n width:                   $paper-width\n height:                  $paper-height\n display:                 block\n\nhtml\n  font-size:              4mm\n\noverlay\n  display:                block\n  position:               absolute\n\nmargin\n  background-color:       #e994ae\n\nmargin.left\nmargin.right\n  display:                inline-block\n  height:                 100%\n\nmargin.left\n  min-width:              $margin-left\n  max-width:              $margin-left\n\nmargin.right\n  min-width:              $margin-right\n  max-width:              $margin-right\n\nmargin.top\nmargin.bottom\n  display:                block\n  width:                  $chase-width\n\nmargin.top\n  min-height:             $margin-top\n  max-height:             $margin-top\n\nmargin.bottom\n  min-height:             $margin-bottom\n  max-height:             $margin-bottom\n\nchase\ncolumn\nbox\nmargin\ngap\npage\n  outline:                1px dotted red\n  outline-offset:         -1px\n\nchase\n  position:               relative\n  left:                   $gutter-left\n  top:                    $gutter-top\n  width:                  $chase-width\n  height:                 $chase-height\n  display:                block\n\nrow\n  display:                inline-block\n  width:                  $chase-width\n  white-space:            nowrap\n  // !!!!!\n  height:                 10mm\n\ngap\n  display:                inline-block\n  width:                  $gap-vertical-width\n  height:                 100%\n  background-color: #ddd\n\ncolumn\n  display:                inline-block\n  white-space:            normal\n  height:                 100%\n\n.columns-3 column\n  width:                  ( ( $chase-width - 2 * $gap-vertical-width - $margin-left - $margin-right ) / 3 )");
          });
          return BODY(function() {
            return ARTBOARD('.pages', function() {
              return ZOOMER(function() {
                return PAGE(function() {
                  return CHASE(function() {
                    MARGIN('.top', function() {});
                    ROW('.horizontal.columns-3', function() {
                      MARGIN('.left', function() {});
                      COLUMN(function() {});
                      GAP('.vertical', function() {});
                      COLUMN(function() {});
                      GAP('.vertical', function() {});
                      COLUMN(function() {});
                      return MARGIN('.right', function() {});
                    });
                    return MARGIN('.bottom', function() {});
                  });
                });
              });
            });
          });
        });
      };
    })(this));
  };

  this.layout = this.FONTTEST_layout;

  this.layout = this.FLEXHEIGHTTEST_layout;

  this.layout = this.TABLE_layout;

  this.layout = this.FLOAT_layout;

  this.layout = this.INLINEBLOCK_layout;

  this.layout = this.NORMAL_layout;

}).call(this);
