// Generated by CoffeeScript 1.9.0
(function() {
  window['BD'] = {};

  BD.style_of = function(element) {
    return window.getComputedStyle(element.get(0));
  };

  BD.bounding_rectangle_of = function(element) {
    return (element.get(0)).getBoundingClientRect();
  };

  BD.height_of = function(element) {

    /* jQuery rounds to integer pixels; this is more precise. */

    /* TAINT algorithm not really tested; discrepencies to jQuery (apart from floating point issue) are known */
    var height, style;
    style = this.style_of(element);
    height = parseFloat(style['height']);
    if (!isFinite(height)) {
      height = (this.bounding_rectangle_of(element))['height'];
    }
    return height - (parseFloat(style['border-top-width'])) - (parseFloat(style['border-bottom-width'])) - (parseFloat(style['margin-top'])) - (parseFloat(style['margin-bottom'])) - (parseFloat(style['padding-top'])) - (parseFloat(style['padding-bottom']));
  };

  BD.width_of = function(element) {

    /* jQuery rounds to integer pixels; this is more precise. */

    /* TAINT algorithm not really tested; discrepencies to jQuery (apart from floating point issue) are known */
    var height, style, width;
    style = this.style_of(element);
    height = parseFloat(style['width']);
    if (!isFinite(width)) {
      width = (this.bounding_rectangle_of(element))['width'];
    }
    return width - (parseFloat(style['border-left-width'])) - (parseFloat(style['border-right-width'])) - (parseFloat(style['margin-left'])) - (parseFloat(style['margin-right'])) - (parseFloat(style['padding-left'])) - (parseFloat(style['padding-right']));
  };

  BD.top_of = function(element) {
    return window.scrollY + (this.bounding_rectangle_of(element))['top'];
  };

  BD.bottom_of = function(element) {
    return (this.top_of(element)) + this.height_of(element);
  };

  BD.relative_top_of = function(element, selector) {
    return (this.top_of(element)) - (this.top_of(element.parents(selector)));
  };

  BD.relative_bottom_of = function(element, selector) {
    return (this.relative_top_of(element, selector)) + this.height_of(element);
  };

}).call(this);
