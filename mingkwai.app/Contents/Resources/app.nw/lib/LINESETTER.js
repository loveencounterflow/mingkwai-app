// Generated by CoffeeScript 1.9.0
(function() {
  var $, CND, D2, LODASH, LineBreaker, TEACUP, after, alert, badge, debug, echo, help, info, log, njs_fs, njs_path, rpr, sleep, step, suspend, urge, warn, whisper,
    __slice = [].slice;

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '眀快排字机/LINESETTER';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  sleep = suspend.sleep;

  D2 = require('pipedreams2');

  $ = D2.remit.bind(D2);

  TEACUP = require('coffeenode-teacup');

  LODASH = require('lodash');

  LineBreaker = require('linebreak');

  this._render_open_tag = function(name, attributes) {
    return (this._render_empty_tag(name, attributes)).replace(/<\/[^>]+>$/, '');
  };

  this._render_close_tag = function(name) {
    return "</" + name + ">";
  };

  this._render_empty_tag = function(name, attributes) {
    return TEACUP.render((function(_this) {
      return function() {
        return TEACUP.TAG(name, attributes);
      };
    })(this));
  };

  this._break_lines = function(text, settings) {
    var R, breakpoint, extended, incremental, last_position, line_breaker, part, position, required, _ref, _ref1;
    text = text.replace(/\n/g, ' ');
    last_position = null;
    incremental = (_ref = settings != null ? settings['incremental'] : void 0) != null ? _ref : true;
    extended = (_ref1 = settings != null ? settings['extended'] : void 0) != null ? _ref1 : false;
    line_breaker = new LineBreaker(text);
    R = [];
    while (breakpoint = line_breaker.nextBreak()) {
      position = breakpoint.position, required = breakpoint.required;
      if (incremental && (last_position != null)) {
        part = text.slice(last_position, breakpoint.position);
      } else {
        part = text.slice(0, breakpoint.position);
      }
      last_position = position;
      R.push(extended ? [part, required, position] : part);
    }
    return R;
  };

  this._$break_lines = function() {
    return $((function(_this) {
      return function(event, send) {
        if (event[0] === 'text') {
          event[0] = 'text-parts';
          event[1] = _this._break_lines(event[1], {
            incremental: true
          });
        }
        return send(event);
      };
    })(this));
  };

  this._$disperse_texts = function() {
    return $((function(_this) {
      return function(event, send) {
        var tail, text_part, type, _i, _len, _ref, _results;
        type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
        if (type === 'text-parts') {
          _ref = tail[0];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            text_part = _ref[_i];
            _results.push(send(['text-part', text_part]));
          }
          return _results;
        } else {
          return send(event);
        }
      };
    })(this));
  };

  this._$hyphenate = function() {
    var P, hyphenate;
    P = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    hyphenate = D2.new_hyphenator.apply(D2, P);
    return $((function(_this) {
      return function(event, send) {
        if (event[0] === 'text') {
          event[1] = hyphenate(event[1]);
        }
        return send(event);
      };
    })(this));
  };

  this._prune_buffer = function(buffer, last_buffer_length) {
    var closed_tag_count, idx, tail, type, _i, _ref, _ref1;
    closed_tag_count = 0;
    for (idx = _i = _ref = last_buffer_length - 1; _i >= 0; idx = _i += -1) {
      _ref1 = buffer[idx], type = _ref1[0], tail = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
      switch (type) {
        case 'text-part':
        case 'empty-tag':
        case 'lone-tag':
          buffer.splice(idx, 1);
          break;
        case 'close-tag':
          buffer.splice(idx, 1);
          closed_tag_count += +1;
          break;
        case 'open-tag':
          if (closed_tag_count > 0) {
            buffer.splice(idx, 1);
            closed_tag_count += -1;
          }
          break;
        default:
          warn("ignored event of type " + (rpr(type)));
      }
    }
    return buffer;
  };

  this._$produce_lines = function(state) {
    var add_buffer, buffer, f, last_buffers;
    buffer = [];
    last_buffers = [];
    state['next'] = false;
    add_buffer = function() {
      last_buffers.push(LODASH.clone(buffer));
      if (last_buffers.length > 2) {
        last_buffers.shift();
      }
      return null;
    };
    f = (function(_this) {
      return function(event, send) {
        var last_buffer, tail, type;
        type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
        if (state['next']) {
          last_buffer = last_buffers.shift();
          warn('©gBgD8', 'buffer:     ', _this._convert_to_html(buffer));
          warn('©gBgD8', 'last_buffer:', _this._convert_to_html(last_buffer));
          if (last_buffer == null) {
            throw new Error("should never happen");
          }
          state['next'] = false;
          send(['set-line', last_buffer, false]);
          _this._prune_buffer(buffer, last_buffer.length);
          last_buffers.length = 0;
        }
        switch (type) {
          case 'open-tag':
          case 'close-tag':
            return buffer.push(event);
          case 'lone-tag':
          case 'empty-tag':
            buffer.push(event);
            add_buffer();
            return send(['test-line', buffer, false]);
          case 'text-part':
            buffer.push(event);
            add_buffer();
            return send(['test-line', buffer, false]);
        }
      };
    })(this);
    return $((function(_this) {
      return function(event, send) {
        var tail, type;
        type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
        switch (type) {
          case 'end':

            /* TAINT buffer may be empty at this point */
            send(['set-line', buffer, true]);
            return send(event);
          default:
            return f(event, send);
        }
      };
    })(this));
  };

  this._convert_to_html = function(buffer) {

    /* Note: as per
    https://medium.com/the-javascript-collection/lets-write-fast-javascript-2b03c5575d9e#1e23, using
    `+=` should be faster than `[].join ''`.
     */
    var R, event, open_tags, tag_name, tail, type, _i, _j, _len, _len1;
    R = '';
    open_tags = [];
    for (_i = 0, _len = buffer.length; _i < _len; _i++) {
      event = buffer[_i];
      type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
      switch (type) {
        case 'open-tag':
          R += this._render_open_tag.apply(this, tail);
          open_tags.unshift(tail[0]);
          break;
        case 'close-tag':
          R += this._render_close_tag(tail[0]);
          open_tags.shift();
          break;
        case 'lone-tag':
          R += this._render_open_tag.apply(this, tail);
          break;
        case 'empty-tag':
          R += this._render_empty_tag.apply(this, tail);
          break;
        case 'text-part':

          /* TAINT escaping `<`, `>`, `&` ??? */
          R += tail[0];
          break;
        default:
          warn("ignored event of type " + (rpr(type)));
      }
    }
    for (_j = 0, _len1 = open_tags.length; _j < _len1; _j++) {
      tag_name = open_tags[_j];
      R += this._render_close_tag(tag_name);
    }
    return R;
  };

  this._$correct_hyphens_etc = function() {
    return $((function(_this) {
      return function(meta_event, send) {
        var buffer, idx, is_last, meta_type, part, replacement, text, type, _i, _ref, _ref1;
        meta_type = meta_event[0], buffer = meta_event[1], is_last = meta_event[2];
        switch (meta_type) {
          case 'test-line':
          case 'set-line':

            /* TAINT consider to move the buffer cloning to an earlier transformer. */
            buffer = LODASH.clone(buffer);
            meta_event[1] = buffer;
            is_last = true;
            for (idx = _i = _ref = buffer.length - 1; _i >= 0; idx = _i += -1) {
              _ref1 = part = buffer[idx], type = _ref1[0], text = _ref1[1];
              if (part[0] !== 'text-part') {
                continue;
              }
              replacement = is_last ? '-' : '';
              text = text.replace(/\xad$/, replacement);
              if (is_last) {
                text = text.replace(/\s+$/, '');
              }
              text = text.replace(/&/g, '&amp;');
              text = text.replace(/</g, '&lt;');
              text = text.replace(/>/g, '&gt;');
              is_last = false;
              buffer[idx] = ['text-part', text];
            }
        }
        return send(meta_event);
      };
    })(this));
  };

  this._$convert_to_html = function() {
    return $((function(_this) {
      return function(meta_event, send) {
        var buffer, html, is_last, meta_type;
        meta_type = meta_event[0], buffer = meta_event[1], is_last = meta_event[2];
        switch (meta_type) {
          case 'test-line':
          case 'set-line':
            html = _this._convert_to_html(buffer);
            return send([meta_type, html, is_last]);
          default:
            return send(meta_event);
        }
      };
    })(this));
  };

  this._$consume_lines = function(state, text, test_line, accept_line, handler) {
    return $((function(_this) {
      return function(meta_event, send) {
        var html, is_last, meta_type;
        meta_type = meta_event[0], html = meta_event[1], is_last = meta_event[2];
        switch (meta_type) {
          case 'test-line':
            return state['next'] = !test_line(html);
          case 'set-line':
            return accept_line(html, is_last);
          case 'end':
            return handler(null);
          default:
            return warn("ignored event of meta-type " + (rpr(meta_type)));
        }
      };
    })(this));
  };

  this.set_lines = (function(_this) {
    return function(text, test_line, accept_line, handler) {
      var input, state;
      state = {
        next: false
      };
      input = D2.create_throughstream();
      input.pipe(D2.HTML.$parse()).pipe(D2.HTML.$collect_texts()).pipe(D2.HTML.$collect_empty_tags()).pipe(_this._$hyphenate()).pipe(_this._$break_lines()).pipe(_this._$disperse_texts()).pipe(_this._$produce_lines(state)).pipe(_this._$correct_hyphens_etc()).pipe(D2.$show()).pipe(_this._$convert_to_html()).pipe(_this._$consume_lines(state, text, test_line, accept_line, handler));
      input.on('end', function() {
        return whisper("input ended.");
      });
      info('©28u', rpr(text));
      input.write(text);
      return input.end();
    };
  })(this);

  this.get_column_linecounts = function(strategy, line_count, column_count) {

    /* thx to http://stackoverflow.com/a/1244369/256361 */
    var R, col, _i;
    R = [];
    switch (strategy) {
      case 'even':
        for (col = _i = 1; 1 <= column_count ? _i <= column_count : _i >= column_count; col = 1 <= column_count ? ++_i : --_i) {
          R.push(Math.floor((line_count + column_count - col) / column_count));
        }
        break;
      default:
        throw new Error("unknown strategy " + (rpr(strategy)));
    }
    return R;
  };

  this._demo = function() {
    var accept_line, test_line, text_idx, texts;
    text_idx = -1;
    texts = ["So.", "So. Here we go!", "x <span class='x'></span> y", "<i>It's <b>very</b> supercalifragilistic</i>, http://<wbr>x.com <span class='x'></span>she said, exasperated, and certainly", "Just as she <b><i>said</i></b> this, she noticed that <i>one of the trees had a door\nleading right into it.</i> 'That's very curious!' she thought. 'But\neverything's curious today. I think I may as well go in at once.' And in\nshe &#x4e00; went.", "<i>It's <b>very</b> supercalifragilistic</i>, http://<wbr>x.com <span class='x'></span>she said, period."];
    test_line = (function(_this) {
      return function(html) {

        /* Must return whether HTML fits into one line. */
        return html.length <= 25;
      };
    })(this);
    accept_line = (function(_this) {
      return function(html, is_last) {

        /* Inserts text line into document */
        help(html, is_last ? '*' : '');
        return null;
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        var text, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = texts.length; _i < _len; _i++) {
          text = texts[_i];
          _results.push((yield _this.set_lines(text, test_line, accept_line, resume)));
        }
        return _results;
      };
    })(this));
    return null;
  };

  if (module.parent == null) {
    this._demo();
  }

}).call(this);
