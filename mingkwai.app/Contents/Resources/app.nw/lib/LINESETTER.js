// Generated by CoffeeScript 1.9.0
(function() {
  var CND, D, D$, HOTMETAL, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '眀快排字机/LINESETTER';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);

  D = require('pipedreams2');

  D$ = D.remit.bind(D);

  HOTMETAL = D.HOTMETAL;

  this.experimental_line_metrics = function() {
    var save_line;
    return save_line = (function(_this) {
      return function(hotml, is_first, is_last) {

        /* Inserts text line into document */
        var a, avg_lws_ratio_pc, chunk, chunk_idx, close_tags, color, idx, is_last_chunk, line, line_width_px, lws, lws_width_px, lws_width_px_avg, material, material_ratio_pc, material_width_px, open_tags, text, _i, _j, _len, _ref;
        for (chunk_idx = _i = 0, _len = hotml.length; _i < _len; chunk_idx = ++_i) {
          chunk = hotml[chunk_idx];
          open_tags = chunk[0], text = chunk[1], close_tags = chunk[2];
          if (text[0] === '<') {
            continue;
          }
          is_last_chunk = chunk_idx >= hotml.length - 1;
          if (chunk_idx !== 0) {
            text = text.replace(/^(\s+)/, "<span class='mkts-lws'>$1</span>");
          }
          if (!is_last_chunk) {
            text = text.replace(/(\s+)$/, "<span class='mkts-lws'>$1</span>");
          }

          /* TAINT not a good implementation */
          if ((text.indexOf("<span class='mkts-lws'>")) === -1) {
            text = "<span class='mkts-material'>" + text + "</span>";
          }
          chunk[1] = text;
        }
        line = get_line(hotml, is_first, is_last);
        container.append(line);

        /*
        http://stackoverflow.com/a/16072668/256361:
        ( ( lws.get idx ).getBoundingClientRect().width for idx in [ 0 .. lws.length - 1 ] )
        http://stackoverflow.com/a/16072449/256361:
        window.getComputedStyle(element).width
         */
        line_width_px = line.width();
        lws = line.find('.mkts-lws');
        debug();
        debug('©RwY5D', line.text());
        if (lws.length > 0) {
          lws_width_px = 0;
          for (idx = _j = 0, _ref = lws.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; idx = 0 <= _ref ? ++_j : --_j) {
            lws_width_px += (lws.eq(idx)).width();
          }
          lws_width_px_avg = lws_width_px / lws.length;
          avg_lws_ratio_pc = a = lws_width_px_avg / line_width_px * 100;
          color = a < 10 ? 'green' : (a < 20 ? 'orange' : 'red');
          debug('Ratio of average inter word spaces to column width:', (avg_lws_ratio_pc.toFixed(1)) + '% ', CND[color]('█'));
        } else {
          material = line.find('.mkts-material');
          if (material.length === 0) {
            warn("no LWS, no material found for line " + (rpr(line.outerHTML())));
          } else {
            material_width_px = material.width();
            material_ratio_pc = material_width_px / line_width_px * 100 - 100;
            a = Math.abs(material_ratio_pc);
            color = a < 10 ? 'green' : (a < 20 ? 'orange' : 'red');
            debug('Ratio of material                  to column width:', (material_ratio_pc.toFixed(1)) + '% ', CND[color]('█'));
          }
        }
        return null;
      };
    })(this);
  };

  this.demo = function(app, md) {
    var column_count, columns, container, get_class, get_line, has_hanging_margin, input, jQuery, save_line, saved_lines, set_lines, test_line;
    jQuery = app['jQuery'];
    container = jQuery('.flex-columns-wrap');
    columns = container.find('.column');
    column_count = columns.length;
    saved_lines = [];
    has_hanging_margin = function(hotml) {
      var last_chr;
      last_chr = CND.last_of((CND.last_of(hotml))[1].replace(/\s+$/, ''));
      return last_chr === '\u00ad' || last_chr === '-' || last_chr === ',' || last_chr === '.' || last_chr === '!' || last_chr === '—' || last_chr === '–' || last_chr === ':';
    };
    get_class = function(is_first, is_last) {
      if (is_first) {
        if (is_last) {
          return 'is-lone';
        }
        return 'is-first';
      }
      if (is_last) {
        return 'is-last';
      }
      return 'is-middle';
    };
    get_line = function(hotml, is_first, is_last) {
      var R;
      R = jQuery(HOTMETAL.as_html(hotml));
      R.addClass(get_class(is_first, is_last));
      if (has_hanging_margin(hotml)) {
        R.addClass(' hangs-right-05ex');
      }
      return R;
    };
    test_line = function(hotml, is_first, is_last) {

      /* Must return whether HTML fits into one line. */
      var R, left_cork, line, right_cork;
      line = get_line(hotml, is_first, is_last);
      left_cork = jQuery("<span class='cork'></span>");
      right_cork = jQuery("<span class='cork'></span>");
      line.prepend(left_cork);
      line.append(right_cork);
      (columns.eq(0)).append(line);
      R = left_cork.offset()['top'] === right_cork.offset()['top'];
      line.detach();
      return R;
    };
    save_line = function(hotml, is_first, is_last) {
      saved_lines.push(get_line(hotml, is_first, is_last));
      return null;
    };
    set_lines = function() {
      var column, column_idx, column_linecount, column_linecounts, count, line, line_count, _i, _j, _len, _len1, _ref;
      line_count = saved_lines.length;
      column_linecounts = HOTMETAL.get_column_linecounts('even', line_count, 3);
      help("line count: " + line_count);
      help("column line counts: " + column_linecounts);

      /* TAINT simplify */
      count = 0;
      for (column_idx = _i = 0, _len = column_linecounts.length; _i < _len; column_idx = ++_i) {
        column_linecount = column_linecounts[column_idx];
        column = columns.eq(column_idx);
        _ref = saved_lines.slice(count, count + column_linecount);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          line = _ref[_j];
          column.append(line);
        }
        count += column_linecount;
      }
      return null;
    };
    input = D.create_throughstream();
    input.pipe(D.MD.$as_html()).pipe(D.TYPO.$quotes()).pipe(D.TYPO.$dashes()).pipe(D.HTML.$parse()).pipe(D.HTML.$slice_toplevel_tags()).pipe(D$((function(_this) {
      return function(block_hotml, send) {
        return send(block_hotml);
      };
    })(this))).pipe((function(_this) {
      return function() {
        var line_count;
        line_count = 0;
        return D$(function(block_hotml, send, end) {
          if (block_hotml != null) {
            HOTMETAL.break_lines(block_hotml, test_line, save_line);
            send(block_hotml);
          }
          if (end != null) {
            set_lines();
            return warn('ended');
          }
        });
      };
    })(this)());
    input.write(md);
    return input.end();
  };

}).call(this);
