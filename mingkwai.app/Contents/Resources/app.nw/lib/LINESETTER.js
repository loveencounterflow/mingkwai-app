// Generated by CoffeeScript 1.9.0
(function() {
  var $, CND, D, HOTMETAL, XCSS, after, alert, badge, debug, echo, help, immediately, info, log, rpr, sleep, step, suspend, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '眀快排字机/LINESETTER';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  immediately = suspend.immediately;

  sleep = suspend.sleep;

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  HOTMETAL = D.HOTMETAL;

  XCSS = require('./XCSS');

  this.demo = function(app, md, settings, handler) {
    var BD, MKTS, arity, block_idx, document, gcolumn, gcolumn_left, gcolumn_offset, gcolumn_top, input, jQuery, line_idx, live, mark_chrs, mm_from_px, t0, t1_a, window, zoomer, ƒ;
    switch (arity = arguments.length) {
      case 3:
        handler = settings;
        settings = {};
        break;
      case 4:
        null;
        break;
      default:
        throw new Error(" expected 3 or 4 arguments, got " + arity);
    }
    jQuery = app['jQuery'];
    MKTS = app['MKTS'];
    window = app['window'];
    document = window['document'];
    BD = window['BD'];
    gcolumn = (jQuery('galley column')).eq(0);
    gcolumn_offset = gcolumn.offset();
    gcolumn_left = gcolumn_offset['left'];
    gcolumn_top = gcolumn_offset['top'];
    zoomer = jQuery('zoomer');
    mm_from_px = function(px) {
      return px * app['mm-per-px'];
    };
    ƒ = function(x, precision) {
      if (precision == null) {
        precision = 0;
      }
      return x.toFixed(precision);
    };
    input = D.create_throughstream();
    live = true;
    live = false;
    t0 = +new Date();
    t1_a = null;
    block_idx = -1;
    line_idx = -1;
    mark_chrs = false;
    mark_chrs = true;
    t0 = +new Date();
    input.pipe(D.MD.$as_html()).pipe((function(_this) {
      return function() {
        return $(function(html, send) {
          var blks, block, blocks, client_rectangle, client_rectangles, counter_idx, height, left, line_count, line_counter, line_counters, top, width, zleft, ztop, _i, _j, _k, _len, _ref, _ref1, _results;
          window.gcolumn = gcolumn;
          blocks = (jQuery("<div>" + html + "</div>")).children();
          for (block_idx = _i = 0, _ref = blocks.length; 0 <= _ref ? _i < _ref : _i > _ref; block_idx = 0 <= _ref ? ++_i : --_i) {
            block = (blocks.eq(block_idx)).wrap("<slide></slide>");
            debug('©8NUEL', block.outerHTML());
            gcolumn.append(block);
          }
          blks = gcolumn.children();
          blks.wrapInner('<span class="line-counter"></span>');
          line_counters = blks.children();
          _results = [];
          for (counter_idx = _j = 0, _ref1 = line_counters.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; counter_idx = 0 <= _ref1 ? ++_j : --_j) {
            line_counter = line_counters.eq(counter_idx);
            client_rectangles = (line_counter.get(0)).getClientRects();
            line_count = client_rectangles.length;
            for (_k = 0, _len = client_rectangles.length; _k < _len; _k++) {
              client_rectangle = client_rectangles[_k];
              left = client_rectangle.left, top = client_rectangle.top, width = client_rectangle.width, height = client_rectangle.height;
              zleft = left - gcolumn_left;
              ztop = top - gcolumn_top;
              gcolumn.append(jQuery("<div style='position:absolute;left:" + zleft + "px;top:" + ztop + "px;width:" + width + "px;height:" + height + "px;outline:1px solid rgba(255,0,0,0.25);'></div>"));
            }
            whisper(line_counter.outerHTML());
            _results.push(help(line_count + " lines"));
          }
          return _results;
        });
      };
    })(this)());
    input.write(md);
    return input.end();
  };

}).call(this);
