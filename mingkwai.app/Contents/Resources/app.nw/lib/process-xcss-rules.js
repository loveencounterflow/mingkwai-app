// Generated by CoffeeScript 1.9.0
(function() {
  var CND, badge, debug, handler_by_properties, help, info, rpr, warn, xcss_rules;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/mingkwai-styles-fix';

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);


  /* TAINT selectors not properly ordered */

  xcss_rules = require('./xcss-rules');

  handler_by_properties = {
    '-mkts-draggable': function(rule) {
      var media, property, selector, selectors, targets, value, _i, _len, _results;
      media = rule.media, selectors = rule.selectors, property = rule.property, value = rule.value;
      if (value !== 'xy') {
        throw new Error("unknown value for xCSS property " + property + ": " + value);
      }
      _results = [];
      for (_i = 0, _len = selectors.length; _i < _len; _i++) {
        selector = selectors[_i];
        targets = $(selector);
        targets.draggable();
        _results.push(help("found " + targets.length + " targets for `" + selector + " { " + property + ": " + value + "; }"));
      }
      return _results;
    },
    '-mkts-columns': function(rule) {
      var media, property, selectors, value;
      media = rule.media, selectors = rule.selectors, property = rule.property, value = rule.value;
      if (value !== 'all' && value !== '1') {
        throw new Error("unknown value for xCSS property " + property + ": " + value);
      }
    },
    '-mkts-foobar': function(rule) {
      var property, selectors, value;
      selectors = rule.selectors, property = rule.property, value = rule.value;
      return debug('Â©uhbsC', rule);
    }
  };

  ($('document')).ready((function(_this) {
    return function() {
      var handler, property, rule, _i, _len, _ref;
      _ref = xcss_rules['rules'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        property = rule.property;
        if ((handler = handler_by_properties[property]) != null) {
          handler(rule);
        } else {
          warn("no handler for xCSS property " + (rpr(property)) + "; skipping");
        }
      }

      /* Although not strictly xCSS rules, we process behaviors that rely on tag names (rather than
      style names used in names) right here.
       */
      ($('i')).on('mouseover', function(event) {
        return ($(this)).switchClass('small', 'medium');
      });
      ($('i')).on('mouseout', function(event) {
        return ($(this)).switchClass('medium', 'small');
      });
      return ($('tool, i')).on('click', function(event) {
        var action, method, _ref1, _ref2, _ref3;
        if ((action = ($(this)).attr('action')) != null) {
          if ((method = (_ref1 = window['app']) != null ? (_ref2 = _ref1['MKTS']) != null ? (_ref3 = _ref2['ACTIONS']) != null ? _ref3[action] : void 0 : void 0 : void 0) != null) {
            help("clicked on tool; action " + (rpr(action)));
            method();
          } else {
            warn("unknown action " + (rpr(action)));
          }
        } else {
          warn("`<tool>` tag without `action` attribute");
        }
        return false;
      });
    };
  })(this));

}).call(this);
