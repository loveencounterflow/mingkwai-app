// Generated by CoffeeScript 1.9.1
(function() {
  var APPLESCRIPT, CND, MKTS, alert, app, badge, debug, echo, help, info, log, rpr, urge, warn, whisper, ƒ;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '眀快排字机/MKTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);


  /* https://github.com/TooTallNate/node-applescript */

  APPLESCRIPT = require('applescript');

  app = null;

  MKTS = this;

  ƒ = function(x, precision) {
    if (precision == null) {
      precision = 2;
    }
    return x.toFixed(precision);
  };

  module.exports = function(_app) {
    app = _app;
    return MKTS;
  };

  this.ZOOM = {};

  this.ZOOM.by = (function(_this) {
    return function(factor) {
      var zoom_0, zoom_1;
      zoom_0 = app['zoom'];
      zoom_1 = zoom_0 * factor;
      app['zoom'] = zoom_1;
      app['zoomer'].css('transform-origin', "top left");
      app['zoomer'].transition({
        scale: zoom_1
      }, 100, 'linear');
      return echo("zoomed to [ " + (ƒ(zoom_1)) + ", ]");
    };
  })(this);

  this.ZOOM.to = (function(_this) {
    return function(zoom_1) {
      var zoom_0;
      zoom_0 = app['zoom'];
      app['zoom'] = zoom_1;
      app['zoomer'].transition({
        scale: zoom_1
      }, 100, 'linear');
      whisper('zoom_0:  ', ƒ(zoom_0));
      whisper('zoom_1:  ', ƒ(zoom_1));
      return help("zoomed to [ " + (ƒ(zoom_1)) + ", ]");
    };
  })(this);

  this.GAUGE = {};

  this.GAUGE["new"] = (function(_this) {
    return function(app) {
      var R;
      R = {
        'd.mm': 1000,
        'd.npx': null,
        'd.rpx': null,
        'rho': null,
        'rpx-per-mm': null,
        'npx-per-mm': null
      };
      return R;
    };
  })(this);

  this.GAUGE.set_ratios = (function(_this) {
    return function(app) {

      /* Since the gauge is 1m = 1000mm wide, a thousandth of its width in pixels equals pixels per
      millimeter:
       */
      var d_mm, d_npx, d_rpx, gauge, gauge_jq, jQuery, window;
      jQuery = app.jQuery, window = app.window;
      gauge_jq = jQuery("<div id='meter-gauge' style='position:absolute;width:1000mm;'></div>");
      (jQuery('body')).append(gauge_jq);
      gauge = app['gauge'];
      d_mm = gauge['d.mm'];
      gauge['d.npx'] = d_npx = parseInt(gauge_jq.css('width'), 10);
      gauge['d.rpx'] = d_rpx = window.BD.get_rectangle(gauge_jq, 'width');
      gauge['rho'] = d_npx / d_rpx;
      gauge['rpx-per-mm'] = d_rpx / d_mm;
      gauge['npx-per-mm'] = d_npx / d_mm;
      gauge_jq.detach();
      return null;
    };
  })(this);

  this.GAUGE._get = (function(_this) {
    return function(app) {
      var R;
      if ((R = app['gauge'])['rpx-per-mm'] == null) {
        _this.GAUGE.set_ratios(app);
      }
      return R;
    };
  })(this);

  this.GAUGE.mm_from_rpx = (function(_this) {
    return function(app, d_rpx) {
      return d_rpx / (_this.GAUGE._get(app))['rpx-per-mm'];
    };
  })(this);

  this.GAUGE.mm_from_npx = (function(_this) {
    return function(app, d_npx) {
      return d_npx / (_this.GAUGE._get(app))['npx-per-mm'];
    };
  })(this);

  this.GAUGE.rpx_from_mm = (function(_this) {
    return function(app, d_mm) {
      return d_mm * (_this.GAUGE._get(app))['rpx-per-mm'];
    };
  })(this);

  this.GAUGE.npx_from_mm = (function(_this) {
    return function(app, d_mm) {
      return d_mm * (_this.GAUGE._get(app))['npx-per-mm'];
    };
  })(this);

  this.CARET = {};

  this.CARET.as_url = (function(_this) {
    return function(app, matter) {
      var caret, column_nr, file_locator, page_nr, y_px;
      file_locator = 'matter';
      caret = matter.caret;
      page_nr = caret['page-nr'];
      column_nr = caret['column-nr'];
      y_px = caret['y.px'];
      return "mkts://" + file_locator + "#page:" + page_nr + "/column:" + column_nr + "/y:" + y_px + "px";
    };
  })(this);

  this.VIEW = {};

  this.VIEW.toggle_galley = (function(_this) {
    return function(handler) {
      if (handler == null) {
        handler = null;
      }
      debug('©0fZv5', app['view']);
      if (app['view'] === 'pages') {
        return _this.VIEW.show_galley(handler);
      } else {
        return _this.VIEW.show_pages(handler);
      }
    };
  })(this);

  this.VIEW.show_galley = (function(_this) {
    return function(handler) {
      var q, window;
      if (handler == null) {
        handler = null;
      }
      window = app['window'];
      q = app['jQuery'];
      app['view'] = 'galley';
      return (q('artboard.pages')).animate({
        opacity: 0
      }, function() {
        (q('artboard.pages')).css('display', 'none');
        if (handler != null) {
          return handler(null);
        }
      });
    };
  })(this);

  this.VIEW.show_pages = (function(_this) {
    return function(handler) {
      var q, window;
      if (handler == null) {
        handler = null;
      }
      window = app['window'];
      q = app['jQuery'];
      app['view'] = 'pages';
      (q('artboard.pages')).css('display', 'block');
      return (q('artboard.pages')).animate({
        opacity: 1
      }, function() {
        if (handler != null) {
          return handler(null);
        }
      });
    };
  })(this);

  this.VIEW.test_page = (function(_this) {
    return function() {
      app['window'].location.href = app['window'].location.href.replace(/index\.html$/, 'test.html');
      return null;
    };
  })(this);

  MKTS.open_print_dialog = function(me) {
    return window.print();
  };

  MKTS.open_save_dialog = function(me) {
    throw new Error("not implemented");
  };

  MKTS.save = function(me) {
    throw new Error("not implemented");
  };

  MKTS.open_print_preview = function(me) {

    /* NB the solution adopted here to get a quick shortcut to open a print preview of the current document
    using AppleScript sending keys etc. is deeply flawed. Not only must tabbing be enabled in the
    Accessibility Settings of the target machine, it would also appear that the outcome of such actions as
    `click menu button "PDF" of window "Print"` are dependent on the OS language settings, and maybe even
    OS version. Last but not least, it can experimentally be made plausible that it is the `repeat` loops
    of the *previous* (not the *current*) script execution that really trigger the actions, which is
    deeply unsatisfying and feels plain wrong. Furthermore, haphazard user actions such as hitting a key
    or clicking during script execution may probably meddle with the intended flow of events. In short, the
    solution as implemented is nothing more than a crude stop-gap.
     */
    var script;
    help("MKTS.open_print_preview");
    MKTS.open_print_dialog();

    /* thx to http://apple.stackexchange.com/a/36947/59895, http://www.jaimerios.com/?p=171 */

    /* TAINT Note the delay clauses. Since it is the previous execution of the script that takes the intended
    actions, each script invocation will run indefinitely, even after the app process itself has been
    terminated. Programming a Tight Loop in AppleScript will cause a noticeable CPU load which is reduced
    to the permille level by the timeout. As stated above, this is nothing more than a stop-gap solution.
     */
    script = "tell application \"System Events\"\n  tell process \"mingkwai\"\n    keystroke \"p\" using {shift down, command down}\n    repeat until exists window \"Print\"\n      delay 0.1\n    end repeat\n    click menu button \"PDF\" of window \"Print\"\n    repeat until exists menu item \"Open PDF in Preview\" of menu 1 of menu button \"PDF\" of window \"Print\"\n      delay 0.1\n    end repeat\n    click menu item \"Open PDF in Preview\" of menu 1 of menu button \"PDF\" of window \"Print\"\n  end tell\nend tell";
    return APPLESCRIPT.execString(script, (function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return help("MKTS.open_print_preview: ok");
      };
    })(this));
  };

  this.ACTIONS = {};

  this.ACTIONS['demo'];

  this.ACTIONS['demo-1'];

  this.ACTIONS['print'];

  this.ACTIONS['print-preview'];

  this.ACTIONS['open'];

  this.ACTIONS['save'];

  this.ACTIONS['save-as'];

  this.ACTIONS['view-test'] = (function(_this) {
    return function() {
      return window.location.href = './test.html';
    };
  })(this);

  this.ACTIONS['tool-mode-hand'] = (function(_this) {
    return function() {
      return _this.push_tool_mode('hand');
    };
  })(this);

}).call(this);
