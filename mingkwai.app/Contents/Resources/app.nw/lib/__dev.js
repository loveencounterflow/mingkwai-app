// Generated by CoffeeScript 1.9.0
(function() {
  var $, CND, D, HOTMETAL, PIPEDREAMS, after, alert, badge, debug, echo, help, info, log, njs_fs, njs_path, rpr, sleep, step, suspend, urge, warn, whisper,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '眀快排字机/__dev';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  sleep = suspend.sleep;

  D = PIPEDREAMS = require('pipedreams2');

  $ = D.remit.bind(D);

  HOTMETAL = require('hotmetal');

  this.HTML = {};

  this.HTML._new_parser = function(settings, stream) {

    /* NB.: Will not send empty text nodes; will not join ('normalize') adjacent text nodes. */
    var Htmlparser, handlers, lone_tags;
    lone_tags = "area base br col command embed hr img input keygen link meta param\nsource track wbr".split(/\s+/);
    handlers = {
      onopentag: function(name, attributes) {
        if (__indexOf.call(lone_tags, name) >= 0) {
          if (name === 'wbr') {
            if ((Object.keys(attributes)).length > 0) {
              throw new Error("illegal <wbr> tag with attributes");
            }

            /* as per https://developer.mozilla.org/en/docs/Web/HTML/Element/wbr */
            return stream.write(['text', '\u200b']);
          } else {
            return stream.write(['lone-tag', name, attributes]);
          }
        } else {
          return stream.write(['open-tag', name, attributes]);
        }
      },
      onclosetag: function(name) {
        if (__indexOf.call(lone_tags, name) < 0) {
          return stream.write(['close-tag', name]);
        }
      },
      ontext: function(text) {
        return stream.write(['text', CND.escape_html(text)]);
      },
      onend: function() {
        stream.write(['end']);
        return stream.end();
      },
      onerror: function(error) {
        throw error;
      }
    };
    Htmlparser = (require('/Volumes/Storage/io/pipedreams2/node_modules/htmlparser2')).Parser;
    return new Htmlparser(handlers, settings);
  };

  this.HTML.$parse = function() {
    var html_parser, settings, stream, _send;
    settings = {
      decodeEntities: true
    };
    stream = PIPEDREAMS.create_throughstream();
    html_parser = this._new_parser(settings, stream);
    _send = null;
    stream.on('data', function(data) {
      return _send(data);
    });
    stream.on('end', function() {
      return _send.end();
    });
    return $((function(_this) {
      return function(source, send, end) {
        _send = send;
        if (source != null) {
          html_parser.write(source);
        }
        if (end != null) {
          return html_parser.end();
        }
      };
    })(this));
  };

  this.demo = function() {
    var html, input;
    html = "<div>Helo world. It's <img src=y.png'> <i class='foo' id='bar'>possible</i>!</div>";
    input = D.create_throughstream();
    input.pipe(this.HTML.$parse()).pipe($((function(_this) {
      return function(data, send, end) {
        if (data != null) {
          urge(data);
          send(data);
        }
        if (end != null) {
          warn('ended');
          return end();
        }
      };
    })(this)));
    return input.write(html);
  };

  if (module.parent == null) {
    this.demo();
  }

}).call(this);
