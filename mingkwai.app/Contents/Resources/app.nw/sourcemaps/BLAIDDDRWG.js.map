{"version":3,"sources":["BLAIDDDRWG.coffee"],"names":[],"mappings":"AA8DA;AAAA,MAAA,EAAA;;AAAA,EAAA,MAAQ,CAAA,IAAA,CAAR,GAAiB,EAAA,GAAK,EAAtB,CAAA;;AAAA,EAGA,EAAE,CAAC,cAAH,GAAsB,SAAE,IAAF,GAAA;WAAY,IAAI,CAAC,GAAL,CAAS,CAAT,EAAZ;EAAA,CAHtB,CAAA;;AAIA;AAAA,4BAJA;;AAAA,EAKA,EAAE,CAAC,eAAH,GAAsB,SAAE,GAAF,EAAO,OAAP,GAAA;WAAoB,UAAA,CAAW,gBAAA,CAAkB,GAAlB,CAAyB,CAAA,OAAA,CAApC,EAApB;EAAA,CALtB,CAAA;;AAAA,EAQA,EAAE,CAAC,GAAH,GAAS,EART,CAAA;;AAAA,EAWA,EAAE,CAAC,GAAH,GAAS,CAAA,SAAA,KAAA,GAAA;WAAA,SAAE,IAAF,EAAQ,OAAR,GAAA;aAAqB,EAAE,CAAC,eAAH,CAAqB,EAAE,CAAC,cAAH,CAAkB,IAAlB,CAArB,EAA+C,OAA/C,EAArB;IAAA,EAAA;EAAA,CAAA,CAAA,CAAA,IAAA,CAXT,CAAA;;AAAA,EAcA,EAAE,CAAC,aAAH,GAAmB,CAAA,SAAA,KAAA,GAAA;WAAA,SAAE,IAAF,EAAQ,GAAR,GAAA;AACjB,UAAA,CAAA;;QADyB,MAAM;OAC/B;AAAA,MAAA,CAAA,GAAQ,CAAE,EAAE,CAAC,cAAH,CAAkB,IAAlB,CAAF,CAA0B,CAAC,qBAA3B,CAAA,CAAR,CAAA;AACO,MAAA,IAAG,WAAH;eAAa,CAAG,CAAA,GAAA,EAAhB;OAAA,MAAA;eAA2B,EAA3B;OAFU;IAAA,EAAA;EAAA,CAAA,CAAA,CAAA,IAAA,CAdnB,CAAA;;AAkBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;KAlBA;AAAA","file":"BLAIDDDRWG.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# BD.style_of = ( element ) -> window.getComputedStyle element.get 0\n# BD.box_of   = ( element ) -> ( element.get 0 ).getBoundingClientRect()\n\n# #-----------------------------------------------------------------------------------------------------------\n# BD.height_of = ( element ) ->\n#   ### jQuery rounds to integer pixels; this is more precise. ###\n#   ### TAINT algorithm not really tested; discrepencies to jQuery (apart from floating point issue) are known ###\n#   style   = @style_of element\n#   height  = parseFloat style[ 'height' ]\n#   unless isFinite height\n#     height = ( @box_of element )[ 'height' ]\n#   return height \\\n#     - ( parseFloat style[ 'border-top-width'    ] ) \\\n#     - ( parseFloat style[ 'border-bottom-width' ] ) \\\n#     - ( parseFloat style[ 'margin-top'          ] ) \\\n#     - ( parseFloat style[ 'margin-bottom'       ] ) \\\n#     - ( parseFloat style[ 'padding-top'         ] ) \\\n#     - ( parseFloat style[ 'padding-bottom'      ] )\n\n# #-----------------------------------------------------------------------------------------------------------\n# BD.width_of = ( element ) ->\n#   ### jQuery rounds to integer pixels; this is more precise. ###\n#   ### TAINT algorithm not really tested; discrepencies to jQuery (apart from floating point issue) are known ###\n#   style   = @style_of element\n#   height  = parseFloat style[ 'width' ]\n#   unless isFinite width\n#     width = ( @box_of element )[ 'width' ]\n#   return width \\\n#     - ( parseFloat style[ 'border-left-width'   ] ) \\\n#     - ( parseFloat style[ 'border-right-width'  ] ) \\\n#     - ( parseFloat style[ 'margin-left'         ] ) \\\n#     - ( parseFloat style[ 'margin-right'        ] ) \\\n#     - ( parseFloat style[ 'padding-left'        ] ) \\\n#     - ( parseFloat style[ 'padding-right'       ] )\n\n# #-----------------------------------------------------------------------------------------------------------\n# BD.top_of = ( element, y = null ) ->\n#   return ( y ? window.scrollY ) + ( @box_of element )[ 'top' ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# BD.bottom_of = ( element, y = null ) ->\n#   return ( @top_of element, y ) + @height_of element\n\n# #-----------------------------------------------------------------------------------------------------------\n# BD.relative_top_of = ( element, selector, y = null ) ->\n#   return ( @top_of element, y ) - ( @top_of element.parents selector, y )\n\n# #-----------------------------------------------------------------------------------------------------------\n# BD.relative_bottom_of = ( element, selector, y = null ) ->\n#   return ( @relative_top_of element, selector, y ) + @height_of element\n\n\n# # BD.x_height_of = ( element ) -> @height_of element\n\n#-----------------------------------------------------------------------------------------------------------\nwindow[ 'BD' ] = BD = {}\n\n#-----------------------------------------------------------------------------------------------------------\nBD._dom_from_hint   = ( hint ) -> hint.get 0\n### `CS`: Computed Style ###\nBD._number_from_cs  = ( dom, cs_name ) -> parseFloat getComputedStyle( dom )[ cs_name ]\n\n#-----------------------------------------------------------------------------------------------------------\nBD.CSS = {}\n\n#-----------------------------------------------------------------------------------------------------------\nBD.css = ( hint, cs_name ) => BD._number_from_cs ( BD._dom_from_hint hint ), cs_name\n\n#-----------------------------------------------------------------------------------------------------------\nBD.get_rectangle = ( hint, key = null ) =>\n  R     = ( BD._dom_from_hint hint ).getBoundingClientRect()\n  return if key? then R[ key ] else R\n\n### Now avaliable as `npm install jquery-replace-text`:\n\n#-----------------------------------------------------------------------------------------------------------\n$.fn.text_nodes = ->\n  # http://refactormycode.com/codes/341-jquery-all-descendent-text-nodes-within-a-node\n  R = []\n  @each ->\n    fn = arguments.callee\n    ( $ @ ).contents().each ->\n      if @nodeType == 3\n        R.push @\n      else\n        fn.apply $ @\n  return $ R\n\n#-----------------------------------------------------------------------------------------------------------\n$.fn.replace_text = ( matcher, replacement, is_raw = no ) ->\n  to_be_removed = if is_raw then null else []\n  @text_nodes().each ( idx ) ->\n    if ( new_value = @nodeValue.replace matcher, replacement ) isnt @nodeValue\n      if not is_raw and '<' in new_value\n        ( $ @ ).before new_value\n        to_be_removed.push @\n      else\n        @nodeValue = new_value\n    ( $ to_be_removed ).remove() if not is_raw and to_be_removed.length > 0\n###\n\n# `\n\n# /*!\n#  * jQuery replaceText - v1.1 - 11/21/2009\n#  * http://benalman.com/projects/jquery-replacetext-plugin/\n#  *\n#  * Copyright (c) 2009 \"Cowboy\" Ben Alman\n#  * Dual licensed under the MIT and GPL licenses.\n#  * http://benalman.com/about/license/\n#  * /\n\n# // https://raw.githubusercontent.com/cowboy/jquery-replacetext/master/jquery.ba-replacetext.js\n\n# // Script: jQuery replaceText: String replace for your jQueries!\n# //\n# // *Version: 1.1, Last updated: 11/21/2009*\n# //\n# // Project Home - http://benalman.com/projects/jquery-replacetext-plugin/\n# // GitHub       - http://github.com/cowboy/jquery-replacetext/\n# // Source       - http://github.com/cowboy/jquery-replacetext/raw/master/jquery.ba-replacetext.js\n# // (Minified)   - http://github.com/cowboy/jquery-replacetext/raw/master/jquery.ba-replacetext.min.js (0.5kb)\n# //\n# // About: License\n# //\n# // Copyright (c) 2009 \"Cowboy\" Ben Alman,\n# // Dual licensed under the MIT and GPL licenses.\n# // http://benalman.com/about/license/\n# //\n# // About: Examples\n# //\n# // This working example, complete with fully commented code, illustrates one way\n# // in which this plugin can be used.\n# //\n# // replaceText - http://benalman.com/code/projects/jquery-replacetext/examples/replacetext/\n# //\n# // About: Support and Testing\n# //\n# // Information about what version or versions of jQuery this plugin has been\n# // tested with, and what browsers it has been tested in.\n# //\n# // jQuery Versions - 1.3.2, 1.4.1\n# // Browsers Tested - Internet Explorer 6-8, Firefox 2-3.6, Safari 3-4, Chrome, Opera 9.6-10.1.\n# //\n# // About: Release History\n# //\n# // 1.1 - (11/21/2009) Simplified the code and API substantially.\n# // 1.0 - (11/21/2009) Initial release\n\n# (function($){\n#   '$:nomunge'; // Used by YUI compressor.\n\n#   // Method: jQuery.fn.replaceText\n#   //\n#   // Replace text in specified elements. Note that only text content will be\n#   // modified, leaving all tags and attributes untouched. The new text can be\n#   // either text or HTML.\n#   //\n#   // Uses the String prototype replace method, full documentation on that method\n#   // can be found here:\n#   //\n#   // https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/String/Replace\n#   //\n#   // Usage:\n#   //\n#   // > jQuery('selector').replaceText( search, replace [, text_only ] );\n#   //\n#   // Arguments:\n#   //\n#   //  search - (RegExp|String) A RegExp object or substring to be replaced.\n#   //    Because the String prototype replace method is used internally, this\n#   //    argument should be specified accordingly.\n#   //  replace - (String|Function) The String that replaces the substring received\n#   //    from the search argument, or a function to be invoked to create the new\n#   //    substring. Because the String prototype replace method is used internally,\n#   //    this argument should be specified accordingly.\n#   //  text_only - (Boolean) If true, any HTML will be rendered as text. Defaults\n#   //    to false.\n#   //\n#   // Returns:\n#   //\n#   //  (jQuery) The initial jQuery collection of elements.\n\n#   $.fn.replace_text = function( search, replace, text_only ) {\n#     return this.each(function(){\n#       var node = this.firstChild,\n#         val,\n#         new_val,\n\n#         // Elements to be removed at the end.\n#         remove = [];\n\n#       // Only continue if firstChild exists.\n#       if ( node ) {\n\n#         // Loop over all childNodes.\n#         do {\n\n#           // Only process text nodes.\n#           if ( node.nodeType === 3 ) {\n\n#             // The original node value.\n#             val = node.nodeValue;\n\n#             // The new value.\n#             new_val = val.replace( search, replace );\n\n#             // Only replace text if the new value is actually different!\n#             if ( new_val !== val ) {\n\n#               if ( !text_only && /</.test( new_val ) ) {\n#                 // The new value contains HTML, set it in a slower but far more\n#                 // robust way.\n#                 $(node).before( new_val );\n\n#                 // Don't remove the node yet, or the loop will lose its place.\n#                 remove.push( node );\n#               } else {\n#                 // The new value contains no HTML, so it can be set in this\n#                 // very fast, simple way.\n#                 node.nodeValue = new_val;\n#               }\n#             }\n#           }\n\n#         } while ( node = node.nextSibling );\n#       }\n\n#       // Time to remove those elements!\n#       remove.length && $(remove).remove();\n#     });\n#   };\n\n# })(jQuery);\n# `\n\n"]}