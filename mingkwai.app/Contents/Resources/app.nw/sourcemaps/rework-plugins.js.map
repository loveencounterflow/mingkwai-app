{"version":3,"sources":["rework-plugins.coffee"],"names":[],"mappings":"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","file":"rework-plugins.js","sourceRoot":"/source/","sourcesContent":["\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = '眀快排字机/rework-plugins'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\n#...........................................................................................................\n\n\n#-----------------------------------------------------------------------------------------------------------\nwalk_rules = ( ast, handler ) ->\n  for entry in ast[ 'rules' ]\n    { type, } = entry\n    switch type\n      when 'media'\n        { media, rules, } = entry\n        handler null, media, rule for rule in entry[ 'rules' ]\n      when 'rule'\n        handler null, '*', entry\n      when 'font-face', 'comment'\n        null\n        # warn \"ignored CSS AST entry of type #{rpr type}\"\n      else\n        return handler new Error \"unknown type #{rpr type}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@foobar_super = ->\n  return ( ast, rw ) =>\n    for { selectors, declarations, position, } in ast[ 'rules' ]\n      continue unless declarations?\n      for declaration in declarations\n        { property, value, } = declaration\n        continue unless /^-mkts-foobar$/.test property\n        declaration[ 'property' ] = '-moz-supercssyeah'\n\n#-----------------------------------------------------------------------------------------------------------\n@collect = ( matchers..., handler ) ->\n  ### Collect all matching properties and call handler with a list of matched CSS declarations; each\n  declaration will be a pod `{ selectors, property, value, }`. ###\n  matchers  = ( [ s, CND.type_of s, ] for s in matchers )\n  rules     = []\n  Z         =\n    '%selectors': {}\n    'rules':      rules\n  #.........................................................................................................\n  return ( ast ) =>\n    walk_rules ast, ( error, media, rule ) ->\n      throw error if error?\n      { selectors, declarations, } = rule\n      for declaration in declarations\n        { property, value, } = declaration\n        for [ matcher, type, ] in matchers\n          switch type\n            when 'text'     then continue unless property is matcher\n            when 'jsregex'  then continue unless matcher.test property\n            else return handler new Error \"unknown matcher type #{rpr type}\"\n          rules.push { media, selectors, property, value, }\n          idx = rules.length - 1\n          ### TAINT selectors not properly ordered ###\n          for selector in selectors\n            ( Z[ '%selectors' ][ selector ]?= [] ).push idx\n    #.......................................................................................................\n    handler null, Z\n\n\n\n"]}