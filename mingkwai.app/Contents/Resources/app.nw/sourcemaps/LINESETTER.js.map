{"version":3,"sources":["LINESETTER.coffee"],"names":[],"mappings":"AAMA;AAAA,MAAA,uQAAA;;AAAA,EAAA,GAAA,GAA4B,OAAA,CAAQ,KAAR,CAA5B,CAAA;;AAAA,EACA,GAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAb,CAD5B,CAAA;;AAAA,EAEA,KAAA,GAA4B,kBAF5B,CAAA;;AAAA,EAGA,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B,CAH5B,CAAA;;AAAA,EAIA,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B,CAJ5B,CAAA;;AAAA,EAKA,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B,CAL5B,CAAA;;AAAA,EAMA,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B,CAN5B,CAAA;;AAAA,EAOA,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B,CAP5B,CAAA;;AAAA,EAQA,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B,CAR5B,CAAA;;AAAA,EASA,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA0B,KAA1B,CAT5B,CAAA;;AAAA,EAUA,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B,CAV5B,CAAA;;AAAA,EAWA,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,CAX5B,CAAA;;AAAA,EAaA,OAAA,GAA4B,OAAA,CAAQ,oBAAR,CAb5B,CAAA;;AAAA,EAcA,IAAA,GAA4B,OAAO,CAAC,IAdpC,CAAA;;AAAA,EAeA,KAAA,GAA4B,OAAO,CAAC,KAfpC,CAAA;;AAAA,EAgBA,KAAA,GAA4B,YAhB5B,CAAA;;AAAA,EAiBA,KAAA,GAA4B,OAAO,CAAC,KAjBpC,CAAA;;AAAA,EAmBA,CAAA,GAA4B,OAAA,CAAQ,YAAR,CAnB5B,CAAA;;AAAA,EAoBA,CAAA,GAA4B,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa,CAAb,CApB5B,CAAA;;AAAA,EAqBA,MAAA,GAA4B,CAAC,CAAC,WAAW,CAAC,IAAd,CAAmB,CAAnB,CArB5B,CAAA;;AAAA,EAuBA,QAAA,GAA4B,OAAA,CAAQ,UAAR,CAvB5B,CAAA;;AAAA,EAwBA,IAAA,GAA4B,OAAA,CAAQ,QAAR,CAxB5B,CAAA;;AAAA,EAyBA,EAAA,GAA4B,OAAA,CAAQ,cAAR,CAzB5B,CAAA;;AAAA,EA0BA,kBAAA,GAA4B,OAAA,CAAQ,sBAAR,CA1B5B,CAAA;;AA+BA;AAAA,qFA/BA;;AAAA,EAgCA,MAAA,GAA4B,IAhC5B,CAAA;;AAAA,EAiCA,IAAA,GAA4B,IAjC5B,CAAA;;AAAA,EAkCA,MAAA,GAA4B,IAlC5B,CAAA;;AAAA,EAmCA,QAAA,GAA4B,IAnC5B,CAAA;;AAAA,EAoCA,GAAA,GAA4B,IApC5B,CAAA;;AAAA,EAsCA,WAAA,GAAc,SAAE,CAAF,GAAA;WAAS,IAAI,CAAC,KAAK,CAAC,WAAX,CAAuB,GAAvB,EAA4B,CAA5B,EAAT;EAAA,CAtCd,CAAA;;AAAA,EAuCA,WAAA,GAAc,SAAE,CAAF,GAAA;WAAS,IAAI,CAAC,KAAK,CAAC,WAAX,CAAuB,GAAvB,EAA4B,CAA5B,EAAT;EAAA,CAvCd,CAAA;;AAAA,EAwCA,WAAA,GAAc,SAAE,CAAF,GAAA;WAAS,IAAI,CAAC,KAAK,CAAC,WAAX,CAAuB,GAAvB,EAA4B,CAA5B,EAAT;EAAA,CAxCd,CAAA;;AAAA,EAyCA,WAAA,GAAc,SAAE,CAAF,GAAA;WAAS,IAAI,CAAC,KAAK,CAAC,WAAX,CAAuB,GAAvB,EAA4B,CAA5B,EAAT;EAAA,CAzCd,CAAA;;AAAA,EA0CA,CAAA,GAAc,SAAE,CAAF,EAAK,SAAL,GAAA;;MAAK,YAAY;KAAO;WAAA,CAAC,CAAC,OAAF,CAAU,SAAV,EAAxB;EAAA,CA1Cd,CAAA;;AAAA,EA8CA,IAAC,CAAA,oBAAD,GAAwB,SAAE,OAAF,GAAA;AACtB,QAAA,CAAA;AAAA,IAAA,CAAA,GAAI,MAAA,CAAO,WAAP,CAAJ,CAAA;AACA,IAAA,IAAG,CAAC,CAAC,MAAF,KAAY,CAAf;AACE,MAAA,CAAA,GAAI,MAAA,CAAO,4FAAP,CAAJ,CAAA;AAAA,MACA,OAAO,CAAC,MAAR,CAAe,CAAf,CADA,CADF;KADA;AAIA,WAAO,CAAP,CALsB;EAAA,CA9CxB,CAAA;;AAAA,EAyDA,IAAC,CAAA,qBAAD,GAAyB,SAAE,QAAF,EAAY,UAAZ,EAAwB,YAAxB,GAAA;AACvB;AAAA,0DAAA;AAAA,QAAA,cAAA;AAAA,IACA,CAAA,GAAM,EADN,CAAA;AAGA,YAAO,QAAP;AAAA,WAEO,MAFP;AAGI,aAAW,2FAAX,GAAA;AACE,UAAA,CAAC,CAAC,IAAF,YAAO,CAAE,UAAA,GAAa,YAAb,GAA4B,GAA9B,IAAuC,aAA9C,CAAA,CADF;AAAA,SAHJ;AAEO;AAFP;AAOI,cAAU,IAAA,KAAA,CAAM,mBAAA,GAAmB,CAAC,GAAA,CAAI,QAAJ,CAAD,CAAzB,CAAV,CAPJ;AAAA,KAHA;AAYA,WAAO,CAAP,CAbuB;EAAA,CAzDzB,CAAA;;AAAA,EAyEA,MAAA,GAAS,EAzET,CAAA;;AAAA,EA4EA,MAAM,CAAC,UAAP,GAAoB,SAAE,SAAF,EAAa,QAAb,GAAA;AAClB,QAAA,+BAAA;AAAA,IAAA,CAAA,GACE;AAAA,MAAA,MAAA,EAAgB,mBAAhB;AAAA,MACA,OAAA,EAAgB,SADhB;AAAA,MAEA,OAAA,EAAgB,KAAA,GAAQ,EAFxB;AAAA,MAGA,QAAA,EAAgB,CAHhB;KADF,CAAA;AAMA,IAAA,IAAG,gBAAH;AACE,MAAA,QAAA,GAAW,SAAS,CAAC,IAAV,CAAe,QAAf,CAAX,CAAA;AACA,WAA0C,4FAA1C,GAAA;AAAA,QAAA,KAAK,CAAC,IAAN,CAAa,QAAQ,CAAC,EAAT,CAAY,GAAZ,CAAb,CAAA,CAAA;AAAA,OADA;AAAA,MAEA,CAAG,CAAA,QAAA,CAAH,GAAgB,QAAQ,CAAC,MAFzB,CADF;KANA;AAWA,WAAO,CAAP,CAZkB;EAAA,CA5EpB,CAAA;;AAAA,EA2FA,MAAM,CAAC,IAAP,GAAc,SAAE,EAAF,EAAM,IAAN,GAAA;AACZ,IAAA,IAAsB,GAAG,CAAC,QAAJ,CAAa,IAAb,CAAtB;AAAA,MAAA,IAAA,GAAO,MAAA,CAAO,IAAP,CAAP,CAAA;KAAA;AAAA,IACA,EAAI,CAAA,OAAA,CAAS,CAAC,IAAd,CAAmB,IAAnB,CADA,CAAA;AAAA,IAEA,EAAI,CAAA,OAAA,CAAS,CAAC,MAAd,CAAqB,IAArB,CAFA,CAAA;AAAA,IAGA,EAAI,CAAA,QAAA,CAAJ,GAAiB,EAAI,CAAA,OAAA,CAAS,CAAC,MAH/B,CAAA;AAIA,WAAO,EAAP,CALY;EAAA,CA3Fd,CAAA;;AAAA,EAmGA,MAAM,CAAC,GAAP,GAAa,SAAE,EAAF,GAAA;AACX,QAAA,CAAA;AAAA,IAAA,IAAmD,EAAI,CAAA,QAAA,CAAJ,GAAiB,CAApE;AAAA,YAAU,IAAA,KAAA,CAAM,+BAAN,CAAV,CAAA;KAAA;AAAA,IACA,CAAA,GAAI,EAAI,CAAA,OAAA,CAAS,CAAC,GAAd,CAAA,CADJ,CAAA;AAAA,IAEA,CAAC,CAAC,MAAF,CAAA,CAFA,CAAA;AAAA,IAGA,EAAI,CAAA,QAAA,CAAJ,GAAiB,EAAI,CAAA,OAAA,CAAS,CAAC,MAH/B,CAAA;AAIA,WAAO,CAAP,CALW;EAAA,CAnGb,CAAA;;AAAA,EA2GA,MAAM,CAAC,MAAP,GAAgB,SAAE,EAAF,EAAM,IAAN,EAAY,GAAZ,GAAA;AACd,IAAA,IAAsB,GAAG,CAAC,QAAJ,CAAa,IAAb,CAAtB;AAAA,MAAA,IAAA,GAAO,MAAA,CAAO,IAAP,CAAP,CAAA;KAAA;AACA,IAAA,IAAG,WAAH;AACE,MAAA,EAAI,CAAA,OAAA,CAAS,CAAC,MAAd,CAAqB,GAArB,EAA0B,CAA1B,EAA6B,IAA7B,CAAA,CAAA;AAAA,MACA,EAAI,CAAA,OAAA,CAAW,CAAA,GAAA,CAAK,CAAC,MAArB,CAA4B,IAA5B,CADA,CADF;KAAA,MAAA;AAIE,MAAA,EAAI,CAAA,OAAA,CAAS,CAAC,OAAd,CAAsB,IAAtB,CAAA,CAAA;AAAA,MACA,EAAI,CAAA,OAAA,CAAS,CAAC,OAAd,CAAsB,IAAtB,CADA,CAJF;KADA;AAAA,IAOA,EAAI,CAAA,QAAA,CAAJ,GAAiB,EAAI,CAAA,OAAA,CAAS,CAAC,MAP/B,CAAA;AAQA,WAAO,EAAP,CATc;EAAA,CA3GhB,CAAA;;AAAA,EAuHA,MAAM,CAAC,IAAP,GAAc,SAAE,EAAF,GAAA;AACZ,QAAA,CAAA;AAAA,IAAA,CAAA,GAAI,EAAI,CAAA,QAAA,CAAU,CAAC,KAAf,CAAA,CAAJ,CAAA;AAAA,IACA,CAAC,CAAC,MAAF,CAAA,CADA,CAAA;AAAA,IAEA,EAAI,CAAA,QAAA,CAAJ,GAAiB,EAAI,CAAA,OAAA,CAAS,CAAC,MAF/B,CAAA;AAGA,WAAO,CAAP,CAJY;EAAA,CAvHd,CAAA;;AAAA,EA8HA,MAAM,CAAC,QAAP,GAAkB,SAAE,EAAF,EAAM,KAAN,EAAa,KAAb,EAAwB,OAAxB,GAAA;AAChB,QAAA,wBAAA;;MAD6B,QAAQ;KACrC;;MADwC,UAAU;KAClD;AAAA,YAAO,KAAA,GAAQ,SAAS,CAAC,MAAzB;AAAA,WACO,CADP;AAAA,WACU,CADV;AACiB,QAAA,IAAA,CADjB;AACU;AADV,WAEO,CAFP;AAGI,QAAA,IAAG,GAAG,CAAC,YAAJ,CAAiB,KAAjB,CAAH;AACE,UAAA,OAAA,GAAU,KAAV,CAAA;AAAA,UACA,KAAA,GAAU,CADV,CADF;SAHJ;AAEO;AAFP;AAOI,cAAU,IAAA,KAAA,CAAM,0CAAA,GAA2C,KAAjD,CAAV,CAPJ;AAAA,KAAA;AASA,IAAA,IAAmD,eAAnD;AAAA,aAAO,IAAC,CAAA,cAAD,CAAgB,EAAhB,EAAoB,KAApB,EAA2B,KAAA,CAAM,OAAN,CAA3B,CAAP,CAAA;KATA;AAWA,IAAA,IAAG,CAAE,MAAA,GAAS,EAAI,CAAA,QAAA,CAAf,CAAA,GAA8B,EAAI,CAAA,QAAA,CAArC;AACE,YAAU,IAAA,KAAA,CAAM,8BAAA,GAA+B,KAA/B,GAAqC,cAArC,GAAmD,MAAzD,CAAV,CADF;KAXA;AAaA,IAAA,IAAA,CAAA,GAAwC,CAAC,GAAJ,CAAQ,KAAR,EAAe,mBAAf,CAArC;AAAA,MAAA,KAAA,GAAQ,IAAC,CAAA,UAAD,CAAY,SAAZ,CAAR,CAAA;KAbA;AAcA,SAAS,gFAAT,GAAA;AACE,MAAA,IAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,IAAC,CAAA,GAAD,CAAK,EAAL,CAAf,CAAA,CADF;AAAA,KAdA;AAgBA,WAAO,CAAE,EAAF,EAAM,KAAN,CAAP,CAjBgB;EAAA,CA9HlB,CAAA;;AAAA,EAkJA,MAAM,CAAC,cAAP,GAAwB,SAAE,EAAF,EAAM,KAAN,EAAa,KAAb,EAAoB,OAApB,GAAA;AACtB,QAAA,MAAA;AAAA,IAAA,IAAG,CAAE,MAAA,GAAS,EAAI,CAAA,QAAA,CAAf,CAAA,GAA8B,EAAI,CAAA,QAAA,CAArC;AACE,YAAU,IAAA,KAAA,CAAM,8BAAA,GAA+B,KAA/B,GAAqC,cAArC,GAAmD,MAAzD,CAAV,CADF;KAAA;AAEA,IAAA,IAAA,CAAA,GAAwC,CAAC,GAAJ,CAAQ,KAAR,EAAe,mBAAf,CAArC;AAAA,MAAA,KAAA,GAAQ,IAAC,CAAA,UAAD,CAAY,SAAZ,CAAR,CAAA;KAFA;WAGA,IAAA,CAAK,CAAA,SAAA,KAAA,GAAA;aAAA,UAAE,MAAF,GAAA;AACH,YAAA,eAAA;AAAA,aAAS,gFAAT,GAAA;AACE,UAAA,IAAA,GAAO,KAAC,CAAA,GAAD,CAAK,EAAL,CAAP,CAAA;AAAA,UACA,OAAA,KAAM,CAAM,KAAN,EAAa,MAAb,CAAN,CADA,CAAA;AAAA,UAEA,KAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,IAAf,CAFA,CADF;AAAA,SAAA;eAIA,OAAA,CAAQ,IAAR,EAAc,CAAE,EAAF,EAAM,KAAN,CAAd,EALG;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAL,EAJsB;EAAA,CAlJxB,CAAA;;AAAA,EAgKA,IAAC,CAAA,8BAAD,GAAkC,SAAA,GAAA;AAChC,QAAA,oBAAA;AAAA,IAAA,oBAAA,GAAuB,IAAvB,CAAA;AACA,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA,GAAA;aAAA,SAAE,WAAF,EAAe,IAAf,GAAA;AACP;AAAA;;WAAA;AAAA,YAAA,qBAAA;AAAA,QAEA,IAAA,GAAO,MAAA,CAAO,QAAQ,CAAC,OAAT,CAAiB,WAAjB,CAAP,CAFP,CAAA;AAGA,QAAA,IAAG,8EAAH;AACE,UAAA,IAAG,eAAA,KAAqB,oBAAxB;AACE,YAAA,IAAA,CAAK,CAAE,SAAF,EAAa,eAAb,CAAL,CAAA,CADF;WADF;SAHA;eAMA,IAAA,CAAK,CAAE,OAAF,EAAW,WAAX,CAAL,EAPO;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAAP,CAFgC;EAAA,CAhKlC,CAAA;;AAAA,EA4KA,IAAC,CAAA,QAAD,GAAY,CAAA,SAAA,KAAA,GAAA;WAAA,SAAE,SAAF,EAAa,WAAb,EAA0B,OAA1B,EAAmC,SAAnC,EAA8C,QAA9C,GAAA;AACV,UAAA,2JAAA;AAAA,MAAA,UAAA,GAA8B,QAAQ,CAAC,KAAT,CAAe,WAAf,EAA4B,SAA5B,EAAuC,QAAA,GAAW,CAAlD,CAA9B,CAAA;AAAA,MACA,SAAA,GAA8B,UAAY,CAAA,CAAA,CAAK,CAAA,CAAA,CAAK,CAAA,CAAA,CADpD,CAAA;AAAA,MAEA,QAAQ,CAAC,GAAG,CAAC,GAAb,CAAiB,SAAjB,EAA4B,SAA5B,EAAuC,OAAvC,CAFA,CAAA;AAAA,MAGA,QAAQ,CAAC,GAAG,CAAC,SAAb,CAAuB,SAAvB,EAAkC,MAAlC,CAHA,CAAA;AAIA,MAAA,IAAG,OAAA,KAAW,CAAd;AAEE,QAAA,QAAQ,CAAC,GAAG,CAAC,SAAb,CAA2B,SAA3B,EAAsC,OAAtC,CAAA,CAFF;OAAA,MAAA;AAKE,QAAA,QAAQ,CAAC,GAAG,CAAC,SAAb,CAA2B,SAA3B,EAAsC,QAAtC,CAAA,CALF;OAJA;AAAA,MAUA,SAAA,GAA8B,QAAQ,CAAC,OAAT,CAAiB,UAAjB,CAV9B,CAAA;AAAA,MAWA,OAAA,GAA8B,MAAA,CAAO,SAAP,CAX9B,CAAA;AAAA,MAYA,WAAA,GAA8B,OAAO,CAAC,QAAR,CAAA,CAAoB,CAAA,CAAA,CAZlD,CAAA;AAAA,MAaA,SAAS,CAAC,MAAV,CAAiB,OAAjB,CAbA,CAAA;AAAA,MAcA,iBAAA,GAA8B,WAAW,CAAC,cAAZ,CAAA,CAd9B,CAAA;AAAA,MAeA,eAAA,GAA8B,SAAS,CAAC,KAAV,CAAA,CAf9B,CAAA;AAAA,MAgBA,gBAAA,GAA8B,iBAAmB,CAAA,CAAA,CAhBjD,CAAA;AAAA,MAiBA,YAAA,GAA8B,gBAAkB,CAAA,OAAA,CAAlB,GAA8B,SAAS,CAAC,MAAV,CAAA,CAAoB,CAAA,MAAA,CAjBhF,CAAA;AAAA,MAkBA,MAAA,GAA8B,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,KAAL,CAAW,YAAA,GAAe,eAA1B,CAAZ,CAlB9B,CAAA;AAmBA;AAAA,2CAnBA;AAoBA,MAAA,IAAmC,MAAA,GAAS,CAA5C;AAAA,QAAA,MAAA,GAA8B,CAA9B,CAAA;OApBA;AAAA,MAqBA,WAAA,GAA8B,MAAA,GAAS,CArBvC,CAAA;AAAA,MAsBA,UAAA,GAA8B,iBAAiB,CAAC,MAtBhD,CAAA;AAuBA,aAAO,CAAE,UAAF,EAAc,SAAd,EAAyB,WAAzB,EAAsC,MAAtC,CAAP,CAxBU;IAAA,EAAA;EAAA,CAAA,CAAA,CAAA,IAAA,CA5KZ,CAAA;;AAAA,EAuMA,IAAC,CAAA,UAAD,GAAc,SAAE,OAAF,GAAA;AACZ,QAAA,SAAA;AAAA,IAAA,SAAA,GAAY,IAAC,CAAA,oBAAD,CAAsB,OAAtB,CAAZ,CAAA;AAEA,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA,GAAA;aAAA,SAAE,WAAF,EAAe,IAAf,GAAA;AACP,YAAA,+RAAA;AAAA,QAAA,SAAA,GAAoB,CAApB,CAAA;AAAA,QACA,QAAA,GAAoB,CADpB,CAAA;AAAA,QAEA,WAAA,GAAoB,CAFpB,CAAA;AAAA,QAGA,cAAA,GAAoB,WAAW,CAAC,MAAZ,GAAqB,CAHzC,CAAA;AAAA,QAIA,UAAA,GAAoB,EAJpB,CAAA;AAAA,QAKA,MAAA,GAAoB,EALpB,CAAA;AAAA,QAMA,QAAA,GAAoB,EANpB,CAAA;AAAA,QAOA,SAAA,GAAoB,IAPpB,CAAA;AAAA,QAQA,cAAA,GAAoB,IARpB,CAAA;AAAA,QASA,gBAAA,GAAoB,IATpB,CAAA;AAAA,QAUA,WAAA,GAAoB,IAVpB,CAAA;AAAA,QAWA,WAAA,GAAoB,KAXpB,CAAA;AAAA,QAYA,OAAA,GAAoB,CAZpB,CAAA;AAAA,QAaA,KAAA,CAAM,QAAN,EAAgB,QAAQ,CAAC,OAAT,CAAiB,WAAjB,CAAhB,CAbA,CAAA;AAeA,eAAA,CAAA,WAAA,GAAA;AACE,UAAA,WAAA,IAAe,CAAA,CAAf,CAAA;AAAA,UACA,cAAA,GAAoB,SADpB,CAAA;AAAA,UAEA,gBAAA,GAAoB,WAFpB,CAAA;AAAA,UAGA,WAAA,GAAoB,MAHpB,CAAA;AAAA,UAIA,OAAA,GAAoB,UAAU,CAAC,MAAX,GAAoB,CAJxC,CAAA;AAKA;AAAA,qCALA;AAMA;AAAA,qCANA;AAOA,UAAA,IAAG,WAAA,GAAc,EAAjB;AACE,YAAA,IAAA,CAAK,2BAAL,CAAA,CAAA;AAAA,YACA,IAAA,CAAK,2BAAL,CADA,CAAA;AAAA,YAEA,IAAA,CAAK,2BAAL,CAFA,CAAA;AAGA,kBAJF;WAPA;AAYA,UAAA,IAAG,OAAA,GAAU,EAAb;AACE,YAAA,IAAA,CAAK,2BAAL,CAAA,CAAA;AAAA,YACA,IAAA,CAAK,0BAAL,CADA,CAAA;AAAA,YAEA,IAAA,CAAK,2BAAL,CAFA,CAAA;AAGA,kBAJF;WAZA;AAiBA;AAAA,qCAjBA;AAAA,UAkBA,MAGkB,KAAC,CAAA,QAAD,CAAU,SAAV,EAAqB,WAArB,EAAkC,OAAlC,EAA2C,SAA3C,EAAsD,QAAtD,CAHlB,EAAE,oBAAF,EACE,kBADF,EAEE,oBAFF,EAGE,eArBF,CAAA;AAAA,UAsBA,IAAA,CAAK,QAAL,EAAe,SAAf,EAA0B,QAA1B,EAAoC,SAApC,CAtBA,CAAA;AAwBA,UAAA,IAAG,QAAA,IAAY,cAAf;AACE,YAAA,KAAA,CAAM,QAAN,EAAgB,KAAhB,CAAA,CAAA;AAAA,YAEA,QAAQ,CAAC,IAAT,CAAgB,MAAhB,CAFA,CAAA;AAAA,YAGA,MAAM,CAAC,IAAP,CAAgB,WAAhB,CAHA,CAAA;AAAA,YAIA,UAAU,CAAC,IAAX,CAAgB,SAAhB,CAJA,CAAA;AAAA,YAKA,WAAA,GAAc,IALd,CAAA;AAMA,qBAPF;WAxBA;AAiCA,UAAA,IAAG,WAAH;AACE,YAAA,KAAA,CAAM,QAAN,EAAgB,KAAhB,CAAA,CAAA;AAAA,YACA,IAAA,CAAK,SAAL,CADA,CAAA;AAAA,YAEA,IAAA,CAAK,yBAAA,GAAyB,CAAC,MAAM,CAAC,OAAP,CAAe,CAAf,CAAD,CAAzB,GAA2C,IAAhD,CAFA,CAAA;AAAA,YAGA,KAAA,CAAM,QAAN,EAAgB,cAAhB,CAHA,CAAA;AAIA,YAAA,IAAG,WAAA,KAAe,CAAlB;AACE,cAAA,IAAA,CAAK,QAAL,EAAe,SAAf,CAAA,CAAA;AAAA,cACA,QAAQ,CAAC,IAAT,CAAgB,MAAhB,CADA,CAAA;AAAA,cAEA,MAAM,CAAC,IAAP,CAAgB,WAAhB,CAFA,CAAA;AAAA,cAGA,UAAU,CAAC,IAAX,CAAgB,SAAhB,CAHA,CAAA;AAAA,cAIA,KAAA,CAAM,QAAN,EAAgB,QAAQ,CAAC,MAAzB,EAAiC,MAAM,CAAC,MAAxC,EAAgD,UAAU,CAAC,MAA3D,EAAmE,QAAnE,CAJA,CAAA;AAAA,cAKA,SAAA,GAAc,QAAA,GAAY,CAL1B,CAAA;AAAA,cAMA,QAAA,GAAc,SAAA,GAAY,CAN1B,CAAA;AAAA,cAOA,WAAA,GAAc,CAPd,CADF;aAAA,MAAA;AAUE,cAAA,KAAA,CAAM,QAAN,EAAgB,KAAhB,CAAA,CAAA;AAAA,cACA,QAAQ,CAAC,IAAT,CAAgB,WAAhB,CADA,CAAA;AAAA,cAEA,MAAM,CAAC,IAAP,CAAgB,gBAAhB,CAFA,CAAA;AAAA,cAGA,UAAU,CAAC,IAAX,CAAgB,cAAhB,CAHA,CAAA;AAAA,cAIA,SAAA,GAAc,QAJd,CAAA;AAAA,cAKA,QAAA,GAAc,SAAA,GAAY,CAL1B,CAAA;AAAA,cAMA,WAAA,GAAc,CANd,CAVF;aALF;WAjCA;AAAA,UAwDA,KAAA,CAAM,QAAN,EAAgB,KAAhB,CAxDA,CAAA;AAAA,UAyDA,QAAA,IAAgB,CAAA,CAzDhB,CAAA;AA2DA,UAAA,IAAG,SAAA,IAAa,cAAhB;AACE,kBAAU,IAAA,KAAA,CAAM,yBAAN,CAAV,CADF;WA5DF;QAAA,CAfA;AAAA,QA8EA,SAAA,GAAyB,MAAM,CAAC,MAAP,KAAiB,CAApB,GAA2B,QAA3B,GAAyC,MA9E/D,CAAA;AAAA,QA+EA,eAAA,GAAsB,MAAQ,CAAA,MAAM,CAAC,MAAP,GAAgB,CAAhB,CA/E9B,CAAA;AAAA,QAgFA,mBAAA,GAAsB,eAAiB,CAAA,CAAA,CAAK,CAAA,CAAA,CAAK,CAAA,CAAA,CAhFjD,CAAA;AAAA,QAiFA,QAAQ,CAAC,GAAG,CAAC,YAAb,CAA2B,mBAA3B,EAAgD,QAAhD,CAjFA,CAAA;AAAA,QAkFA,QAAQ,CAAC,GAAG,CAAC,YAAb,CAA2B,mBAA3B,EAAgD,OAAhD,CAlFA,CAAA;AAAA,QAmFA,QAAQ,CAAC,GAAG,CAAC,SAAb,CAA2B,mBAA3B,EAAgD,SAAhD,CAnFA,CAAA;AAqFA,aAAA,8DAAA;wCAAA;AACE,UAAA,SAAA,GAA0B,UAAY,CAAA,CAAA,CAAK,CAAA,CAAA,CAAK,CAAA,CAAA,CAAhD,CAAA;AAAA,UACA,MAAA,GAA0B,QAAU,CAAA,QAAA,CADpC,CAAA;AAEA,UAAA,IAA8C,MAAA,GAAS,CAAvD;AAAA,YAAA,QAAQ,CAAC,GAAG,CAAC,SAAb,CAAuB,SAAvB,EAAkC,QAAlC,CAAA,CAAA;WAFA;AAAA,UAGA,QAAQ,CAAC,GAAG,CAAC,GAAb,CAAiB,SAAjB,EAA4B,QAA5B,EAAsC,MAAM,CAAC,OAAP,CAAe,CAAf,CAAtC,CAHA,CAAA;AAAA,UAIA,SAAA,GAA0B,QAAQ,CAAC,OAAT,CAAiB,UAAjB,CAJ1B,CAAA;AAAA,UAKA,UAAY,CAAA,QAAA,CAAZ,GAA0B,SAL1B,CADF;AAAA,SArFA;AA6FA;AAAA,gEA7FA;AAAA,QA8FA,SAAS,CAAC,KAAV,CAAA,CA9FA,CAAA;AAAA,QA+FA,IAAA,CAAK,UAAL,CA/FA,CAAA;eAgGA,IAAA,CAAO,CAAC,CAAE,WAAA,GAAc,UAAU,CAAC,MAA3B,CAAmC,CAAC,OAApC,CAA4C,CAA5C,CAAD,CAAA,GAA+C,kBAAtD,EAjGO;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAAP,CAHY;EAAA,CAvMd,CAAA;;AAAA,EA8SA,IAAC,CAAA,IAAD,GAAQ,SAAA,GAAA;AACN,QAAA,mEAAA;AAAA,IAAA,cAAA,GAAsB,MAAA,CAAO,aAAP,CAAtB,CAAA;AAAA,IACA,iBAAA,GAAsB,CADtB,CAAA;AAAA,IAEA,aAAA,GAAsB,cAAc,CAAC,EAAf,CAAkB,iBAAlB,CAFtB,CAAA;AAAA,IAGA,UAAA,GAAsB,CAHtB,CAAA;AAAA,IAIA,KAAA,GAAsB,EAJtB,CAAA;AAMA,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA,GAAA;aAAA,SAAE,UAAF,EAAc,IAAd,EAAoB,GAApB,GAAA;AAEP,YAAA,8MAAA;AAAA,QAAA,IAAG,kBAAH;AACE;AAAA,4DAAA;AAAA,UACA,gBAAA,GAAoB,EAAE,CAAC,aAAH,CAAiB,aAAjB,CADpB,CAAA;AAAA,UAEA,UAAA,GAAoB,gBAAkB,CAAA,KAAA,CAFtC,CAAA;AAAA,UAGA,gBAAA,GAAoB,WAAA,CAAY,gBAAkB,CAAA,QAAA,CAA9B,CAHpB,CAAA;AAIA;AAAA,yCAJA;AAAA,UAKA,UAAA,GAAoB,GALpB,CAAA;AAOA,eAAA,kEAAA;6CAAA;AACE,YAAA,UAAA,IAAgB,CAAA,CAAhB,CAAA;AAAA,YACA,IAAA,GAAgB,MAAA,CAAO,SAAP,CADhB,CAAA;AAAA,YAEA,KAAK,CAAC,IAAN,CAAW,IAAX,CAFA,CAAA;AAAA,YAGA,aAAa,CAAC,MAAd,CAAqB,IAArB,CAHA,CAAA;AAAA,YAIA,SAAA,GAAgB,EAAE,CAAC,aAAH,CAAiB,IAAjB,CAJhB,CAAA;AAAA,YAKA,QAAA,GAAgB,SAAW,CAAA,OAAA,CAL3B,CAAA;AAAA,YAMA,SAAA,GAAgB,SAAW,CAAA,QAAA,CAN3B,CAAA;AAAA,YAOA,MAAA,GAAgB,SAAW,CAAA,KAAA,CAAX,GAAwB,UAPxC,CAAA;AAAA,YAQA,SAAA,GAAgB,SAAW,CAAA,QAAA,CAAX,GAAwB,UARxC,CAAA;AAAA,YASA,QAAA,GAAgB,WAAA,CAAY,QAAZ,CAThB,CAAA;AAAA,YAUA,SAAA,GAAgB,WAAA,CAAY,SAAZ,CAVhB,CAAA;AAAA,YAWA,MAAA,GAAgB,WAAA,CAAY,MAAZ,CAXhB,CAAA;AAAA,YAYA,SAAA,GAAgB,WAAA,CAAY,SAAZ,CAZhB,CAAA;AAAA,YAaA,YAAA,GAAgB,SAAA,GAAY,gBAb5B,CAAA;AAAA,YAcA,MAAA,GAAgB,YAAA,IAAgB,UAdhC,CAAA;AAeA,YAAA,IAAG,MAAH;AACE;AAAA,oDAAA;AAAA,cACA,iBAAA,IAAsB,CAAA,CADtB,CAAA;AAAA,cAEA,aAAA,GAAsB,cAAc,CAAC,EAAf,CAAkB,iBAAlB,CAFtB,CAAA;AAAA,cAGA,IAAI,CAAC,MAAL,CAAA,CAHA,CAAA;AAAA,cAIA,aAAa,CAAC,MAAd,CAAqB,IAArB,CAJA,CADF;aAhBF;AAAA,WAPA;AAAA,UA8BA,IAAA,CAAK,UAAL,CA9BA,CADF;SAAA;AAiCA,QAAA,IAAG,WAAH;iBAGE,GAAA,CAAA,EAHF;SAnCO;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAAP,CAPM;EAAA,CA9SR,CAAA;;AAAA,EAiWA,IAAC,CAAA,IAAD,GAAQ,SAAE,IAAF,EAAQ,EAAR,EAAY,QAAZ,EAAsB,OAAtB,GAAA;AACN,QAAA,gJAAA;AAAA,YAAO,KAAA,GAAQ,SAAS,CAAC,MAAzB;AAAA,WACO,CADP;AAEI,QAAA,OAAA,GAAY,QAAZ,CAAA;AAAA,QACA,QAAA,GAAY,EADZ,CAFJ;AACO;AADP,WAIO,CAJP;AAKI,QAAA,IAAA,CALJ;AAIO;AAJP;AAOI,cAAU,IAAA,KAAA,CAAM,kCAAA,GAAmC,KAAzC,CAAV,CAPJ;AAAA,KAAA;AASA,YAAO,MAAA,8CAAgC,IAAvC;AAAA,WACO,IADP;AAEI,QAAA,OAAA,GAAU,QAAQ,CAAC,QAAQ,CAAC,QAAlB,CAAA,CAAV,CAFJ;AACO;AADP,WAGO,MAHP;AAII,QAAA,OAAA,GAAU,CAAC,CAAC,aAAF,CAAA,CAAV,CAJJ;AAGO;AAHP;AAMI,eAAO,OAAA,CAAY,IAAA,KAAA,CAAM,iBAAA,GAAiB,CAAC,GAAA,CAAI,MAAJ,CAAD,CAAvB,CAAZ,CAAP,CANJ;AAAA,KATA;AAAA,IAiBA,GAAA,GAAsB,IAjBtB,CAAA;AAAA,IAkBA,MAAA,GAAsB,GAAK,CAAA,QAAA,CAlB3B,CAAA;AAAA,IAmBA,MAAA,GAAsB,GAAK,CAAA,QAAA,CAnB3B,CAAA;AAAA,IAoBA,IAAA,GAAsB,GAAK,CAAA,MAAA,CApB3B,CAAA;AAAA,IAqBA,MAAA,GAAsB,GAAK,CAAA,QAAA,CArB3B,CAAA;AAAA,IAsBA,QAAA,GAAsB,MAAQ,CAAA,UAAA,CAtB9B,CAAA;AAAA,IAuBA,EAAA,GAAsB,MAAQ,CAAA,IAAA,CAvB9B,CAAA;AAAA,IAwBA,OAAA,GAAsB,CAAE,MAAA,CAAO,eAAP,CAAF,CAA0B,CAAC,EAA3B,CAA8B,CAA9B,CAxBtB,CAAA;AAAA,IAyBA,cAAA,GAAsB,OAAO,CAAC,MAAR,CAAA,CAzBtB,CAAA;AAAA,IA0BA,YAAA,GAAsB,cAAgB,CAAA,MAAA,CA1BtC,CAAA;AAAA,IA2BA,WAAA,GAAsB,cAAgB,CAAA,KAAA,CA3BtC,CAAA;AAAA,IA4BA,MAAA,GAAsB,MAAA,CAAO,QAAP,CA5BtB,CAAA;AAAA,IA8BA,KAAA,GAAsB,CAAC,CAAC,oBAAF,CAAA,CA9BtB,CAAA;AAAA,IAiCA,SAAA,GAAsB,IAjCtB,CAAA;AAAA,IAkCA,UAAA,GAAsB,KAlCtB,CAAA;AAAA,IAmCA,MAAA,GAAsB,CAAA,IAAK,IAAA,CAAA,CAnC3B,CAAA;AAAA,IAoCA,SAAA,GAAsB,EApCtB,CAAA;AAAA,IAsCA,KAIE,CAAC,IAJH,CAIQ,OAJR,CAeE,CAAC,IAfH,CAeQ,CAAA,CAAE,CAAA,SAAA,KAAA,GAAA;aAAA,SAAE,IAAF,EAAQ,IAAR,GAAA;AACN,QAAA,SAAS,CAAC,IAAV,CAAe,CAAE,oBAAF,EAA4B,IAAA,IAAA,CAAA,CAAJ,GAAa,MAArC,CAAf,CAAA,CAAA;AAAA,QACA,IAAA,CAAK,QAAQ,CAAC,IAAI,CAAC,KAAd,CAAoB,IAApB,CAAL,CADA,CAAA;eAEA,SAAS,CAAC,IAAV,CAAe,CAAE,wBAAF,EAAgC,IAAA,IAAA,CAAA,CAAJ,GAAa,MAAzC,CAAf,EAHM;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAfR,CAqBE,CAAC,IArBH,CAqBQ,CAAA,CAAE,CAAA,SAAA,KAAA,GAAA;aAAA,SAAE,cAAF,EAAkB,IAAlB,GAAA;AACN;AAAA,wCAAA;eACA,QAAQ,CAAC,mBAAT,CAA6B,cAA7B,EAA6C,SAAE,KAAF,EAAS,WAAT,GAAA;AAC3C,UAAA,IAAoB,aAApB;AAAA,YAAA,IAAI,CAAC,KAAL,CAAW,KAAX,CAAA,CAAA;WAAA;iBACA,IAAA,CAAK,WAAL,EAF2C;QAAA,CAA7C,EAFM;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CArBR,CA+BE,CAAC,IA/BH,CA+BQ,CAAA,CAAE,CAAA,SAAA,KAAA,GAAA;aAAA,SAAE,WAAF,EAAe,IAAf,GAAA;AACN;AAAA,+CAAA;AACA;AAAA;;WADA;AAAA,YAAA,uBAAA;AAAA,QAGA,IAAA,CAAK,yEAAL,CAHA,CAAA;AAAA,QAIA,WAAA,GAAc,WAAa,CAAA,CAAA,CAJ3B,CAAA;AAAA,QAKA,UAAA,GAAc,WAAa,CAAA,WAAW,CAAC,MAAZ,GAAqB,CAArB,CAL3B,CAAA;AAAA,QAMA,WAAa,CAAA,CAAA,CAAG,CAAC,IAAjB,CAA0B,CAAE,GAAF,EAAO,EAAP,CAA1B,CANA,CAAA;AAAA,QAOA,UAAa,CAAA,CAAA,CAAG,CAAC,OAAjB,CAA0B,CAAE,GAAF,CAA1B,CAPA,CAAA;eAQA,IAAA,CAAK,WAAL,EATM;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CA/BR,CA0CE,CAAC,IA1CH,CA0CQ,IAAC,CAAA,UAAD,CAAY,OAAZ,CA1CR,CA6CE,CAAC,IA7CH,CA6CQ,IAAC,CAAA,IAAD,CAAA,CA7CR,CA+CI,CAAC,IA/CL,CA+CU,CAAC,CAAC,OAAF,CAAU,SAAA,GAAA;AACd;AAAA,kCAAA;AAAA,UAAA,0DAAA;AAAA,MACA,KAAA,GAAQ,MAAM,CAAC,gBAAP,CAAwB,CAAE,MAAA,CAAO,QAAP,CAAF,CAAmB,CAAC,GAApB,CAAwB,CAAxB,CAAxB,CADR,CAAA;AAAA,MAGA,KAAA,GAAQ,mIAEiC,CAAC,KAFlC,CAEwC,KAFxC,CAHR,CAAA;AAMA,WAAA,uCAAA;wBAAA;AACE,QAAA,IAAA,CAAK,IAAL,EAAW,KAAO,CAAA,IAAA,CAAlB,CAAA,CADF;AAAA,OANA;AAQA;AAAA,eARA;AAAA,MASA,SAAS,CAAC,IAAV,CAAe,CAAE,UAAF,EAAkB,IAAA,IAAA,CAAA,CAAJ,GAAa,MAA3B,CAAf,CATA,CAAA;AAUA,WAAA,6CAAA,GAAA;AACE,6BADI,uBAAa,YACjB,CAAA;AAAA,QAAA,KAAA,CAAM,QAAN,EAAgB,WAAhB,EAA6B,CAAE,EAAA,GAAK,IAAP,CAAa,CAAC,OAAd,CAAsB,CAAtB,CAA7B,CAAA,CADF;AAAA,OAVA;aAYA,OAAA,CAAA,EAbc;IAAA,CAAV,CA/CV,CAtCA,CAAA;AAAA,IAoGA,KAAK,CAAC,KAAN,CAAY,EAAZ,CApGA,CAAA;WAqGA,KAAK,CAAC,GAAN,CAAA,EAtGM;EAAA,CAjWR,CAAA;;AAAA,EA0cA,IAAC,CAAA,cAAD,GAAkB,SAAA,GAAA;AAChB,QAAA,+BAAA;AAAA,IAAA,cAAA,GAAsB,MAAA,CAAO,aAAP,CAAtB,CAAA;AAAA,IACA,OAAA,GAAsB,EADtB,CAAA;AAEA,SAAW,8BAAX,GAAA;AACE,MAAA,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,UAAP,CAAoB,cAAc,CAAC,EAAf,CAAkB,GAAlB,CAApB,EAA6C,OAA7C,CAAb,CAAA,CADF;AAAA,KAFA;AAAA,IAIA,KAAA,CAAM,QAAN,EAAgB,OAAS,CAAA,CAAA,CAAG,CAAC,MAA7B,EAAqC,OAAS,CAAA,CAAA,CAAG,CAAC,MAAlD,EAA0D,OAAS,CAAA,CAAA,CAAG,CAAC,MAAvE,CAJA,CAAA;AAAA,IAKA,MAAM,CAAC,QAAP,CAAgB,OAAS,CAAA,CAAA,CAAzB,EAA8B,OAAS,CAAA,CAAA,CAAvC,EAA4C,CAA5C,CALA,CAAA;WAMA,KAAA,CAAM,QAAN,EAAgB,OAAS,CAAA,CAAA,CAAG,CAAC,MAA7B,EAAqC,OAAS,CAAA,CAAA,CAAG,CAAC,MAAlD,EAPgB;EAAA,CA1clB,CAAA;;AAAA,EAodA,IAAC,CAAA,oBAAD,GAAwB,SAAA,GAAA;AACtB,QAAA,oGAAA;AAAA,IAAA,cAAA,GAAsB,MAAA,CAAO,aAAP,CAAtB,CAAA;AAAA,IACA,OAAA,GAAsB,EADtB,CAAA;AAEA;AAAA,kCAFA;AAAA,IAGA,gBAAA,GAAsB,CAHtB,CAAA;AAAA,IAIA,UAAA,GAAsB,CAJtB,CAAA;AAMA,SAAkB,2GAAlB,GAAA;AACE,MAAA,MAAA,GAAc,MAAM,CAAC,UAAP,CAAoB,cAAc,CAAC,EAAf,CAAkB,UAAlB,CAApB,EAAoD,OAApD,CAAd,CAAA;AAAA,MACA,UAAA,IAAc,MAAQ,CAAA,QAAA,CADtB,CAAA;AAAA,MAEA,OAAO,CAAC,IAAR,CAAa,MAAb,CAFA,CADF;AAAA,KANA;AAAA,IAWA,iBAAA,GAAsB,IAAC,CAAA,qBAAD,CAAuB,MAAvB,EAA+B,UAA/B,EAA2C,gBAA3C,CAXtB,CAAA;AAAA,IAYA,KAAA,CAAM,QAAN,EAAgB,iBAAhB,CAZA,CAAA;AAAA,IAaA,IAAA,CAAK,CAAA,SAAA,KAAA,GAAA;aAAA,UAAE,MAAF,GAAA;AACH,YAAA,gBAAA;AAAA;aAAkB,gHAAlB,GAAA;AACE,UAAA,MAAA,GAAS,OAAS,CAAA,UAAA,CAAlB,CAAA;AAAA,uBACA;;AAAA;mBAAM,MAAQ,CAAA,QAAA,CAAR,GAAqB,iBAAmB,CAAA,UAAA,CAA9C,GAAA;AACE;AAAA,iDAAA;AAAA,4BACA,OAAA,MAAY,CAAC,cAAP,CAAsB,OAAS,CAAA,UAAA,CAA/B,EAA6C,OAAS,CAAA,UAAA,GAAa,CAAb,CAAtD,EAAwE,CAAxE,EAA2E,MAA3E,CAAN,EADA,CADF;YAAA,CAAA;;cAAA,EADA,CADF;AAAA;uBADG;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAL,CAbA,CAAA;AAqBA,WAAO,IAAP,CAtBsB;EAAA,CApdxB,CAAA;AAAA","file":"LINESETTER.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = '眀快排字机/LINESETTER'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\nlater                     = setImmediate\nsleep                     = suspend.sleep\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n# LODASH                    = D.LODASH\nHOTMETAL                  = require 'hotmetal'\nXCSS                      = require './XCSS'\nBD                        = require './BLAIDDDRWG'\nglyph_replacements        = require './glyph-replacements'\n#...........................................................................................................\n# ### https://github.com/meryn/performance-now ###\n# now                       = require 'performance-now'\n#...........................................................................................................\n### The module-globals become available when `demo` is called with `app` argument ###\njQuery                    = null\nMKTS                      = null\nwindow                    = null\ndocument                  = null\napp                       = null\n#-----------------------------------------------------------------------------------------------------------\nmm_from_rpx = ( d ) -> MKTS.GAUGE.mm_from_rpx app, d\nmm_from_npx = ( d ) -> MKTS.GAUGE.mm_from_npx app, d\nrpx_from_mm = ( d ) -> MKTS.GAUGE.rpx_from_mm app, d\nnpx_from_mm = ( d ) -> MKTS.GAUGE.npx_from_mm app, d\nƒ           = ( x, precision = 2 ) -> x.toFixed precision\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_slugs_container = ( gcolumn ) ->\n  R = jQuery 'container'\n  if R.length is 0\n    R = jQuery \"<container style='display:block;width:100%;height:30mm;outline:1px solid red'></container>\"\n    gcolumn.append R\n  return R\n\n\n#===========================================================================================================\n# BALANCED COLUMNS\n#-----------------------------------------------------------------------------------------------------------\n@get_column_linecounts = ( strategy, line_count, column_count ) ->\n  ### thx to http://stackoverflow.com/a/1244369/256361 ###\n  R   = []\n  #.........................................................................................................\n  switch strategy\n    #.......................................................................................................\n    when 'even'\n      for col in [ 1 .. column_count ]\n        R.push ( line_count + column_count - col ) // column_count\n    #.......................................................................................................\n    else\n      throw new Error \"unknown strategy #{rpr strategy}\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nCOLUMN = {}\n\n#-----------------------------------------------------------------------------------------------------------\nCOLUMN.new_column = ( substrate, selector ) ->\n  R =\n    '~isa':         'LINESETTER/column'\n    '%self':        substrate\n    'lines':        lines = []\n    'length':       0\n  #.........................................................................................................\n  if selector?\n    elements = substrate.find selector\n    lines.push ( elements.eq idx ) for idx in [ 0 ... elements.length ]\n    R[ 'length' ] = elements.length\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nCOLUMN.push = ( me, line ) ->\n  line = jQuery line if CND.isa_text line\n  me[ 'lines' ].push line\n  me[ '%self' ].append line\n  me[ 'length' ] = me[ 'lines' ].length\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\nCOLUMN.pop = ( me ) ->\n  throw new Error \"unable to pop from empty list\" if me[ 'length' ] < 1\n  R = me[ 'lines' ].pop()\n  R.detach()\n  me[ 'length' ] = me[ 'lines' ].length\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nCOLUMN.insert = ( me, line, idx ) ->\n  line = jQuery line if CND.isa_text line\n  if idx?\n    me[ 'lines' ].splice idx, 0, line\n    me[ '%self' ][ idx ].before line\n  else\n    me[ 'lines' ].unshift line\n    me[ '%self' ].prepend line\n  me[ 'length' ] = me[ 'lines' ].length\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\nCOLUMN.pull = ( me ) ->\n  R = me[ '%lines' ].shift()\n  R.detach()\n  me[ 'length' ] = me[ 'lines' ].length\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nCOLUMN.pop_over = ( me, other, count = 1, handler = null ) ->\n  switch arity = arguments.length\n    when 2, 4 then null\n    when 3\n      if CND.isa_function count\n        handler = count\n        count   = 1\n    else\n      throw new Error \"expected between 2 and 4 arguments, got #{arity}\"\n  #.........................................................................................................\n  return @pop_over_async me, other, count handler if handler?\n  #.........................................................................................................\n  if ( length = me[ 'length' ] ) < me[ 'length' ]\n    throw new Error \"unable to divide with count #{count} and length #{length}\"\n  other = @new_column substrate unless CND.isa other, 'LINESETTER/column'\n  for _ in [ 1 .. count ]\n    @insert other, @pop me\n  return [ me, other, ]\n\n#-----------------------------------------------------------------------------------------------------------\nCOLUMN.pop_over_async = ( me, other, count, handler ) ->\n  if ( length = me[ 'length' ] ) < me[ 'length' ]\n    throw new Error \"unable to divide with count #{count} and length #{length}\"\n  other = @new_column substrate unless CND.isa other, 'LINESETTER/column'\n  step ( resume ) =>\n    for _ in [ 1 .. count ]\n      line = @pop me\n      yield after 0.001, resume\n      @insert other, line\n    handler null, [ me, other, ]\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$add_column_formatting_signals = ->\n  last_columns_setting = null\n  return $ ( block_hotml, send ) =>\n    ### TAINT inefficient because we convert to HTML and then to jQuery merely to see whether an XCSS\n    selector matches the block element ###\n    node = jQuery HOTMETAL.as_html block_hotml\n    if ( columns_setting = ( XCSS.rules_from_node app, node )[ '-mkts-columns' ] )?\n      if columns_setting isnt last_columns_setting\n        send [ 'columns', columns_setting, ]\n    send [ 'block', block_hotml, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@try_slug = ( container, block_hotml, line_nr, start_idx, stop_idx ) =>\n  slug_hotml                  = HOTMETAL.slice block_hotml, start_idx, stop_idx + 1\n  block_tag                   = slug_hotml[ 0 ][ 0 ][ 0 ]\n  HOTMETAL.TAG.set block_tag, 'line-nr', line_nr\n  HOTMETAL.TAG.add_class block_tag, 'slug'\n  if line_nr is 1\n    # HOTMETAL.TAG.remove_class  block_tag, 'middle'\n    HOTMETAL.TAG.add_class     block_tag, 'first'\n  else\n    # HOTMETAL.TAG.remove_class  block_tag, 'first'\n    HOTMETAL.TAG.add_class     block_tag, 'middle'\n  slug_html                   = HOTMETAL.as_html slug_hotml\n  slug_jq                     = jQuery slug_html\n  width_gauge                 = slug_jq.children()[ 0 ]\n  container.append slug_jq\n  client_rectangles           = width_gauge.getClientRects()\n  container_width             = container.width()\n  client_rectangle            = client_rectangles[ 0 ]\n  client_width                = client_rectangle[ 'right' ] - container.offset()[ 'left' ]\n  excess                      = Math.max 0, Math.floor client_width - container_width\n  ### TAINT arbitrary precision limit ###\n  excess                      = 0 if excess < 3\n  is_too_long                 = excess > 0\n  line_count                  = client_rectangles.length\n  return [ slug_hotml, slug_html, is_too_long, excess, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$get_slugs = ( gcolumn ) ->\n  container = @_get_slugs_container gcolumn\n  #.........................................................................................................\n  return $ ( block_hotml, send ) =>\n    start_idx         = 0\n    stop_idx          = 0\n    trial_count       = 0\n    last_start_idx    = block_hotml.length - 1\n    html_lines        = []\n    slices            = []\n    excesses          = []\n    slug_html         = null\n    good_slug_html    = null\n    good_slice_hotml  = null\n    good_excess       = null\n    is_finished       = no\n    line_nr           = 0\n    debug '©Wo0m7', HOTMETAL.as_html block_hotml\n    #.......................................................................................................\n    until is_finished\n      trial_count += +1\n      good_slug_html    = slug_html\n      good_slice_hotml  = slice_hotml\n      good_excess       = excess\n      line_nr           = html_lines.length + 1\n      ### --------------------- ###\n      ### TAINT arbitrary limit ###\n      if trial_count > 25\n        urge \"#########################\"\n        warn \"too many trials; aborting\"\n        urge \"#########################\"\n        break\n      if line_nr > 25\n        urge \"#########################\"\n        warn \"too many lines; aborting\"\n        urge \"#########################\"\n        break\n      ### --------------------- ###\n      [ slice_hotml\n        slug_html\n        is_too_long\n        excess      ] = @try_slug container, block_hotml, line_nr, start_idx, stop_idx\n      urge '©uaDsn', start_idx, stop_idx, slug_html\n      #.....................................................................................................\n      if stop_idx >= last_start_idx\n        debug '©xeQQw', '(1)'\n        # warn '2', \"stop_idx > last_start_idx\"\n        excesses.push   excess\n        slices.push     slice_hotml\n        html_lines.push slug_html\n        is_finished = yes\n        continue\n      #.....................................................................................................\n      if is_too_long\n        debug '©xeQQw', '(2)'\n        warn slug_html\n        warn \"exceeding container by #{excess.toFixed 1}px\"\n        debug '©hBuvs', good_slug_html\n        if trial_count is 1\n          help '©wxSPj', slug_html\n          excesses.push   excess\n          slices.push     slice_hotml\n          html_lines.push slug_html\n          debug '©TmJFr', excesses.length, slices.length, html_lines.length, excesses\n          start_idx   = stop_idx  + 1\n          stop_idx    = start_idx - 1\n          trial_count = 0\n        else\n          debug '©xeQQw', '(3)'\n          excesses.push   good_excess\n          slices.push     good_slice_hotml\n          html_lines.push good_slug_html\n          start_idx   = stop_idx\n          stop_idx    = start_idx - 1\n          trial_count = 0\n      #.....................................................................................................\n      debug '©xeQQw', '(4)'\n      stop_idx     += +1\n      #.....................................................................................................\n      if start_idx >= last_start_idx\n        throw new Error \"not yet implemented (2)\"\n    #.......................................................................................................\n    new_class           = if slices.length is 1 then 'single' else 'last'\n    last_line_hotml     = slices[ slices.length - 1 ]\n    last_line_block_tag = last_line_hotml[ 0 ][ 0 ][ 0 ]\n    HOTMETAL.TAG.remove_class  last_line_block_tag, 'middle'\n    HOTMETAL.TAG.remove_class  last_line_block_tag, 'first'\n    HOTMETAL.TAG.add_class     last_line_block_tag, new_class\n    #.......................................................................................................\n    for slug_hotml, slug_idx in slices\n      tag_hotml               = slug_hotml[ 0 ][ 0 ][ 0 ]\n      excess                  = excesses[ slug_idx ]\n      HOTMETAL.TAG.add_class tag_hotml, 'excess' if excess > 0\n      HOTMETAL.TAG.set tag_hotml, 'excess', excess.toFixed 2\n      slug_html               = HOTMETAL.as_html slug_hotml\n      html_lines[ slug_idx ]  = slug_html\n    #.......................................................................................................\n    ### deactivate this to keep seeing lines in the galley ###\n    container.empty()\n    send html_lines\n    help \"#{( trial_count / html_lines.length ).toFixed 2} trials per line\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$xxx = ->\n  target_columns      = jQuery 'page column'\n  target_column_idx   = 0\n  target_column       = target_columns.eq target_column_idx\n  line_count          = 0\n  lines               = []\n  #.........................................................................................................\n  return $ ( html_lines, send, end ) =>\n    #.......................................................................................................\n    if html_lines?\n      ### TAINT no need to recompute on each paragraph ###\n      column_rectangle  = BD.get_rectangle target_column\n      delta_y_px        = column_rectangle[ 'top' ]\n      column_height_mm  = mm_from_npx column_rectangle[ 'height' ]\n      ### TAINT arbitrary precision ###\n      epsilon_mm        = 0.5\n      #.....................................................................................................\n      for html_line, line_idx in html_lines\n        line_count   += +1\n        line          = jQuery html_line\n        lines.push line\n        target_column.append line\n        rectangle     = BD.get_rectangle line\n        width_px      = rectangle[ 'width'  ]\n        height_px     = rectangle[ 'height' ]\n        top_px        = rectangle[ 'top'    ] - delta_y_px\n        bottom_px     = rectangle[ 'bottom' ] - delta_y_px\n        width_mm      = mm_from_npx width_px\n        height_mm     = mm_from_npx height_px\n        top_mm        = mm_from_npx top_px\n        bottom_mm     = mm_from_npx bottom_px\n        overshoot_mm  = bottom_mm - column_height_mm\n        is_off        = overshoot_mm >= epsilon_mm\n        if is_off\n          ### TAINT must detect when page full ###\n          target_column_idx  += +1\n          target_column       = target_columns.eq target_column_idx\n          line.detach()\n          target_column.append line\n        # debug '©bPew4', line_idx, ( ƒ bottom_mm, 1 ), ( ƒ column_height_mm, 1 ), ( ƒ overshoot_mm, 1 ), is_off, line.text()[ .. 20 ]\n      send html_lines\n    #.......................................................................................................\n    if end?\n      # debug '©nGQHo', line_count\n      # debug '©bgs63', @get_column_linecounts 'even', line_count, columns_per_page\n      end()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@demo = ( app_, md, settings, handler ) ->\n  switch arity = arguments.length\n    when 3\n      handler   = settings\n      settings  = {}\n    when 4\n      null\n    else\n      throw new Error \" expected 3 or 4 arguments, got #{arity}\"\n  #---------------------------------------------------------------------------------------------------------\n  switch format = settings[ 'format' ] ? 'md'\n    when 'md'\n      as_html = HOTMETAL.MARKDOWN.$as_html()\n    when 'html'\n      as_html = D.$pass_through()\n    else\n      return handler new Error \"unknown format #{rpr format}\"\n  #---------------------------------------------------------------------------------------------------------\n  app                 = app_\n  matter              = app[ 'matter' ]\n  jQuery              = app[ 'jQuery' ]\n  MKTS                = app[ 'MKTS'   ]\n  window              = app[ 'window' ]\n  document            = window[ 'document' ]\n  BD                  = window[ 'BD'  ]\n  gcolumn             = ( jQuery 'galley column' ).eq 0\n  gcolumn_offset      = gcolumn.offset()\n  gcolumn_left        = gcolumn_offset[ 'left' ]\n  gcolumn_top         = gcolumn_offset[ 'top'  ]\n  zoomer              = jQuery 'zoomer'\n  # window.gcolumn      = gcolumn # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n  input               = D.create_throughstream()\n\n  #---------------------------------------------------------------------------------------------------------\n  mark_chrs           = yes\n  mark_lines          = no\n  XXX_t0              = +new Date()\n  XXX_times           = []\n  #.........................................................................................................\n  input\n    #.......................................................................................................\n    # .pipe D.TYPO.$quotes()\n    # .pipe D.TYPO.$dashes()\n    .pipe as_html\n    #.......................................................................................................\n    # .pipe $ ( html, send ) =>\n    #   ### TAINT Q & D method to insert leading, trailing block stuff ###\n    #   ### Definition of these must go to document CSS, ###\n    #   ### should then be applied by XCSS (?) and / or MD parser ###\n    #   html = html.replace /(<p loc=\"[0-9,]+\">)/gi, '$1###'\n    #   # html = html.replace /(<\\/p>)/gi, \"\"\"&nbsp;<span style='white-space:nowrap;'>&nbsp;x&nbsp;x&nbsp;x&nbsp;x&nbsp;x&nbsp;x&nbsp;x&nbsp;x&nbsp;x&nbsp;x&nbsp;x</span>$1\"\"\"\n    #   debug '©4QPHJ', html\n    #   send html\n    #.......................................................................................................\n    .pipe $ ( html, send ) =>\n      XXX_times.push [ \"html from markdown\", new Date() - XXX_t0, ]\n      send HOTMETAL.HTML.parse html\n      XXX_times.push [ \"html parsed into hotml\", new Date() - XXX_t0, ]\n    # .pipe make character replacements\n    #.......................................................................................................\n    .pipe $ ( document_hotml, send ) =>\n      ### split document into blocks ###\n      HOTMETAL.slice_toplevel_tags document_hotml, ( error, block_hotml ) =>\n        send.error error if error?\n        send block_hotml\n    #.......................................................................................................\n    # .pipe $async ( data, done ) => later => done data\n    #.......................................................................................................\n    # .pipe @$add_column_formatting_signals()\n    #.......................................................................................................\n    .pipe $ ( block_hotml, send ) =>\n      ### TAINT use HOTMETAL library method ###\n      ### Wrap block contents in `w` tags used to measure line width;\n      method analoguous to `jQuery.wrapInner` ###\n      warn '#######################################################################'\n      first_shred = block_hotml[ 0                      ]\n      last_shred  = block_hotml[ block_hotml.length - 1 ]\n      first_shred[ 0 ].push     [ 'w', {}, ]\n      last_shred[  2 ].unshift  [ 'w', ]\n      send block_hotml\n    #.......................................................................................................\n    .pipe @$get_slugs gcolumn\n    # .pipe $get_slugs_v2 gcolumn\n    #.......................................................................................................\n    .pipe @$xxx()\n    #.......................................................................................................\n      .pipe D.$on_end ->\n        ### show some text metrics ###\n        style = window.getComputedStyle ( jQuery 'p.slug' ).get 0\n        # debug '©8Rnxi', ( name for name of style )\n        names = \"\"\"\n          font fontFamily fontKerning fontSize fontStretch fontStyle fontVariant fontVariantLigatures\n          fontWeight wordSpacing letterSpacing\"\"\".split /\\s+/\n        for name in names\n          help name, style[ name ]\n        ### !!! ###\n        XXX_times.push [ \"finished\", new Date() - XXX_t0, ]\n        for [ description, dt, ] in XXX_times\n          debug '©1enOB', description, ( dt / 1000 ).toFixed 3\n        handler()\n  #.........................................................................................................\n  input.write md\n  input.end()\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_pop_over = ->\n  target_columns      = jQuery 'page column'\n  columns             = []\n  for idx in [ 0 .. 2 ]\n    columns.push COLUMN.new_column ( target_columns.eq idx ), '.slug'\n  debug '©1rmzT', columns[ 0 ].length, columns[ 1 ].length, columns[ 2 ].length\n  COLUMN.pop_over columns[ 0 ], columns[ 1 ], 1\n  debug '©1rmzT', columns[ 0 ].length, columns[ 1 ].length\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo_pop_over_async = ->\n  target_columns      = jQuery 'page column'\n  columns             = []\n  ### TAINT arbitrary constant ###\n  columns_per_page    = 3\n  line_count          = 0\n  #.........................................................................................................\n  for column_idx in [ 0 ... columns_per_page ]\n    column      = COLUMN.new_column ( target_columns.eq column_idx ), '.slug'\n    line_count += column[ 'length' ]\n    columns.push column\n  #.........................................................................................................\n  column_linecounts   = @get_column_linecounts 'even', line_count, columns_per_page\n  debug '©rnC7h', column_linecounts\n  step ( resume ) =>\n    for column_idx in [ 0 ... columns_per_page ]\n      column = columns[ column_idx ]\n      while column[ 'length' ] > column_linecounts[ column_idx ]\n        ### TAINT invalid last column idx ###\n        yield COLUMN.pop_over_async columns[ column_idx ], columns[ column_idx + 1 ], 1, resume\n      # handler null\n  #.........................................................................................................\n  return null\n\n\n\n\n\n\n\n\n\n\n\n\n"]}